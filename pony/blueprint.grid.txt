/* --------------------------------------------------------------
   grid.css - mirror version of blueprint grid.css
-------------------------------------------------------------- */

/* A container should group all your columns. */
.container {
  width: $(page_width)px;
  margin: 0 auto;
}

/* Use this class on any div.span / container to see the grid. */
.showgrid { 
  background: url(grid.png); 
}

/* Body margin for a sensile default look. */
body {
  margin:1.5em 0;
}


/* Columns
-------------------------------------------------------------- */

/* Sets up basic grid floating and margin. */$/*

*/$for(column in range(1, column_count+1)){$cycle(1,5){
}div.span-$(column);}$sep{, }; {
  float: left;
  margin-right: $int(gutter_width)px; 
}

/* The last column in a row needs this class. */
div.last { margin-right: 0; }

/* Use these classes to set the width of a column. */
.span-1  { width: $int(column_width)px; }
$for(column in range(2, column_count))
{.span-$('%-2s' % column); { width: $int(column_width + (column-1)*(column_width + gutter_width))px; }
}.span-$(column_count);, div.span-$(column_count); { width: 950px; margin: 0; }

/* Add these to a column to append empty cols. */
.append-1  { padding-right: 40px; }  
$for(column in range(2, column_count))
{.append-$('%-2s' % column); { padding-right: $int(column * (column_width + gutter_width))px; } 
}
/* Add these to a column to prepend empty cols. */
.prepend-1  { padding-left: 40px; }  
$for(column in range(2, column_count))
{.prepend-$('%-2s' % column); { padding-left: $int(column * (column_width + gutter_width))px; } 
}

/* Border on right hand side of a column. */
div.border {
  padding-right: $int(gutter_width * 0.5 - 1)px;
  margin-right: $int(gutter_width * 0.5)px;
  border-right: 1px solid #eee;
}

/* Border with more whitespace, spans one column. */
div.colborder {
  padding-right: $int(column_width - 0.5*gutter_width - 1)px;
  margin-right: $int(column_width - 0.5 * gutter_width)px;
  border-right: 1px solid #eee;
}


/* Use these classes on an element to push it into the 
   next column, or to pull it into the previous column.  */

$for(column in range(1, 6))
{.pull-$(column); { margin-left: -$int(column * (column_width + gutter_width))px; }
}
$for(column in range(1, 6)){.pull-$(column);}$sep{, }; {
  float: left;
	position:relative;
}
$for(column in range(1, 6))
{.push-$(column); { margin: 0 -$int(column * (column_width + gutter_width))px 1.5em $int(column * (column_width + gutter_width))px; }
}
$for(column in range(0, 6)){.push-$(column);}$sep{, }; {
  float: right;
	position:relative;
}


/* Misc classes and elements
-------------------------------------------------------------- */

/* Use a .box to create a padded box inside a column.  */ 
.box { 
  padding: 1.5em; 
  margin-bottom: 1.5em; 
  background: #E5ECF9; 
}

/* Use this to create a horizontal ruler across a column. */
hr {
  background: #ddd; 
  color: #ddd;
  clear: both; 
  float: none; 
  width: 100%; 
  height: .1em;
  margin: 0 0 1.45em;
  border: none; 
}
hr.space {
  background: #fff;
  color: #fff;
}

/* Clearing floats without extra markup
   Based on How To Clear Floats Without Structural Markup by PiE
   [http://www.positioniseverything.net/easyclearing.html] */

.clearfix, .container { display: inline-block; }
.clearfix:after, .container:after {
  content: "."; 
  display: block; 
  height: 0; 
  clear: both; 
  visibility: hidden;
}
* html .clearfix,
* html .container   { height: 1%; }
.clearfix, .container  { display: block; }

/* Regular clearing
   apply to column that should drop below previous ones. */

.clear { clear:both; }
