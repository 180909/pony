import datetime
from pony.main import *

class Faculty(Entity):                # Primary key may be defined on any column
    name = PrimaryKey(str)  
    subfaculties = Set('Subfaculty')  # <--+
                                      #    | Bi-directional link 'one-to-many'
class Subfaculty(Entity):             #    | integrity mantained automatically !
    name = Required(str)              #    | ALL links MUST be bi-directional
    faculty = Required('Faculty')     # <--+ (may be 1:1, 1:many, many:many)
    groups = Set('Group')
    Unique(faculty, name)             # Unique composite index defined
                                      # on object attribute (faculty is object!)

class Course(Entity):                 # Primary key is autogenerated integer id
    group = Required('Group')
    subject = Required('Subject')
    teacher = Required('Teacher')
    exam_marks = Set('ExamMark')
    Unique(group, subject, teacher)   # Secondary composite key
    
class Subject(Entity):
    name = PrimaryKey(str)
    courses = Set('Course')
    potential_teachers = Set('Teacher')
    current_teachers = IndirectSet('.courses.teacher')
        # Calculated attributes may be useful with refactoring

class Group(Entity):
    number = PrimaryKey(str, 5)             # Max str length is defined
    start_year = Required(int)
    subfaculty = Required('Subfaculty')
    courses = Set('Course')
    students = Set('Student', default=True) # Each group behave as collection

class Person(Entity):
    ssn = Unique(str)    
    first_name = Required(str)
    middle_name = Optional(str)             # Nullable column
    last_name = Required(str)
    burth_day = Optional(datetime.date)     # Type system is extensible

class Teacher(Person):                      # Entity inheritance
    courses = Set('Course')
    potential_subjects = Set('Subject')
    current_subjects = IndirectSet('.courses.subject')
    groups = IndirectSet('.courses.group')

class Student(Person):
    group = Required('Group')
    exam_marks = Set('ExamMark')

    def average_mark(self):
        return AVG(select(m.value for m in self.marks)) # Single SQL query

    def set_mark(self, subject_name, value):
        course = select_one(c for c in self.group.courses 
                              if c.subject.name == subject) # Single SQL query
        # Mark will be saved automatically on transaction commit:
        return Mark(student=self, course=course, value=value,
                    date=datetime.date.today())

class ExamMark(Entity):
    student = Required('Student')
    course = Required('Course')
    subject = Indirect('.course.subject')
    value = Required(int)
    date = Required(datetime.date)      
    PrimaryKey(student, course)       # Composite primary key
