Формы
=====

Для демонстрации работы форм в Пони наберем следующий код в интерактивном режиме:

    >>> @webpage('/')
    ... def example():
    ... 	f = Form()
    ... 	f.first_name = Text(required = True)
    ... 	f.last_name = Text()
    ... 	f.age = Text(type = int)
    ... 	if f.is_valid:
    ... 		print "<h1>Hello ", f.first_name.value, f.last_name.value, "!</h1>"
    ... 	else:
    ... 		print f
    ... 
    >>> http.start()
    Starting HTTP server at localhost:8080

Затем откроем в браузере страницу по адресу http://localhost:8080. В окне браузера мы увидим форму:

![form1](/pony/static/img/doc/form1.png)

Давайте теперь посмотрим что произойдет, если мы нажмем кнопку "Отправить":

![form2](/pony/static/img/doc/form2.png)

Мы видим, что при заполнении формы возникли ошибки. Давайте теперь подойдем к делу более ответственно и
заполним необходимые поля:

![form3](/pony/static/img/doc/form3.png)

Отправляем форму снова. Теперь ошибок нет и мы видим приветствие:

![form4](/pony/static/img/doc/form4.png)

Давайте разберемся что происходит в этом примере.

Генерация HTML
--------------
Пони позволяет достаточно просто создавать формы используя класс Form, а затем автоматически генерировать
HTML код, который отображается на HTML странице. 

В нашем примере мы импортируем необходимые компоненты из pony.main, затем создаем экземпляр формы (f = Form())
и добавляем в форму поля first_name, last_name и age. Далее в коде идет проверка - если форма заполнена и при ее
заполнении не обнаружено ошибок (if f.is_valid), то выводится приветствие, а иначе выводится HTML код формы.
В примере видно, что при генерации HTML Пони автоматически добавляет символ `*` рядом с полем First name, который
показывает пользователю, что это поле обязательно для заполнения. Кроме того, рядом с полями отображаются
названия полей (First name, Last name, Age). 

Проверка данных формы и вывод результата
----------------------------------------
Пользователь вводит в браузере адрес http://localhost:8080 и в ответ функция example()
генерирует страницу с формой. Пользователь заполняет форму, затем данные отсылаются на сервер при нажатии на
на кнопку "Отправить". На сервере производится проверка данных.
Если форма не прошла проверку на сервере, необходимо сообщить пользователю о допущенных ошибках, чтобы
он мог их исправить. В нашем примере при создании полей мы задаем условия: поле first_name должно быть
обязательно заполнено, а в поле age должно быть введено число. Если эти условия не выполняются, то форма
не принимается и пользователю выводится форма с указанием на ошибки до тех пор, пока введенная информация не
будет удовлетворять заданным условиям.

Если полученные данные прошли проверку, атрибут `is_valid` принимает значение True и теперь можно
обработать принятые значения, которые содержатся в атрибуте value.

Процесс обработки формы
-----------------------
При работе с формой, функция, которая конструирует форму вызывается более одного раза.
Когда пользователь открывает страницу, которая содержит форму, функция *example()* в нашей программе 
конструирует форму и присваивает указанные в программе значения полям (или значения по умолчанию).
Когда форма передается на сервер посредством нажатия кнопки "Отправить" на форме, та же самая функция *example()*
конструирует форму и устанавливает введенные пользователем значения элементов.
Кроме того, у формы и у элементов формы устанавливаются значения для атрибутов `is_submitted` и `is_valid`.
Атрибут `is_submitted` приобретает значение True, если значения элементов отражают введенные пользователем 
данные (форма передана от пользователя) и False, если элементы были сконструированы, используя указанные в программе
значения (форма сгенерирована для отображения пользователю).
Атрибут `is_valid` приобретает значение True, если форма была принята от пользователя и введенные значения удовлетворяют
условиям и False, если форма не была принята от пользователя, либо если значения полей не удовлетворяют
поставленным условиям.

Теперь после краткого введения мы можем сосредоточиться на каждом аспекте более детально.

[Поля формы]()
[Работаем с данными формы]()
[Проверка данных формы и генерация сообщений об ошибках]()
[Стилизация формы]()
[Изменение HTML представления формы]()
[Безопасные формы]()
[Многостраничные формы]()
[Несколько форм на одной странице]()
[Наследование форм(Процесс обработки форм)]()

Поля формы
----------
Форма может содержать следующие поля для ввода информации:

    Text
    Hidden
    File
    Password
    
    DatePicker
    StaticText
    TextArea
    Checkbox
    Select
    RadioGroup
    MultiSelect
    CheckboxGroup
    Composite
    Grid
    Submit and Reset buttons    

Работаем с данными формы
------------------------
attrs
error
error_text
form
hidden
html
html_value
initial_value
is_submitted
is_valid
label
name
regex
required
tag
type
value

Проверка данных формы и генерация сообщений об ошибках
------------------------------------------------------

Стилизация формы
----------------

Изменение HTML представления формы
----------------------------------

Безопасные формы
----------------
эскапирование и тикеты
особенность POST
повторная отсылка формы и Редирект raise(http.Redirect("/another_url")))

Многостраничные формы
Несколько форм на одной странице
Наследование форм(Процесс обработки форм)


