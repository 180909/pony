Формы
=====

HTML форма - это набор элементов, которые позволяют пользователю ввести данные и передать эти данные на сервер.
В HTML странице форма представляется как набор тэгов, заключенных между тэгами формы:

    <form>
    ...
    </form>

Пони позволяет достаточно просто создавать формы используя класс Form, а затем автоматически генерировать
HTML код, который отображается на HTML странице.

Создадим простешую форму с помощью Пони. В интерактивном режиме наберем следующий код:

    >>> from pony.main import *
    >>> f = Form()
    >>> print f

Команда *print f* отображает на экране HTML код, который будет сгенерирован при отображении формы на странице.
Для этого примера HTML код будет таким:

    <form method="POST" accept-charset="UTF-8" name="Form" class="pony">
    <input type="hidden" name="_t" value="1392b9b::J2i7/0n12A8=:wxFX1RsvVc0MjyeUL6M37jx2Gzs=" class="ticket-field">
    <input type="hidden" name="_f" value="Form" class="hidden-field">
    <table>
    <tr><td>&nbsp;</td><td><div class="buttons"><input type="submit">
    </div></td></tr>
    </table>
    </form>     

Рассмотрим код формы более подробно.
В первой строчке мы видим открываыющий тэг для формы form, а затем несколько аттрибутов.
Аттрибут method задает способ, которым данные будут переданы на сервер. Здесь возможны 2 варианта:
method="GET" и method="POST". 

Метод GET используется когда передаваемые через форму данные не изменяют хранимую на сервере информацию.
Например, в форме пользователю предлагается выбрать город, для которого с сервера передаются какие то записи.

Метод POST используется когда передаваемые через форму данные изменяют хранимую на сервере информацию
Например, когда форма содержит данные для регистрации на сайте.

Мы можем создать форму с методом передачи "GET", одним из способов создания такой формы будет такая запись:

    f = Form(method = "GET")

Далее в коде формы мы видим аттрибут accept-charset, который задает кодировку для формы (более подробная информация
о возможных значениях аттрибутов доступна здесь ...).
Аттрбут name - имя формы, служит для того, чтобы можно было идентифицировать эту форму используя javascript или css.
Аттрибут class позволяет связать форму с css правилами.
Строчка

    <input type="hidden" name="_t" value="1392b9b::J2i7/0n12A8=:wxFX1RsvVc0MjyeUL6M37jx2Gzs=" class="ticket-field">

содержит информацию о тикете для этой формы. Подробное описание алгоритма работы описано здесь ...
Строчка

    <input type="hidden" name="_f" value="Form" class="hidden-field">

содержит информацию о классе формы в Пони ....
Далее в коде формы идет HTML код, который описывает визуальное представление формы на странице.
По умолчанию это представление содержит лишь кнопку, нажатие которой приводит к отсылке значений полей формы на сервер.

Давайте теперь посмотрим как форма отображается на экране у пользователя.
Для этого нам нужно ввести следующий код в интерактивном режиме:

    >>> from pony.main import *
    >>> @webpage('/')
    ... def form_example():
    ... 	f = Form()
    ... 	print f
    ... 
    >>> http.start()
    Starting HTTP server at localhost:8080

В этом примере мы импортировали необходимые компоненты из pony.main и создали функцию-обработчик
страницы по адресу '/', то есть заглавной страницы нашего тестового веб-сайта. Эта функция
создает форму и выводит ее в ответ на запрос к нашей странице.

Питон - динамический язык и используя это свойство мы можем довольно просто добавлять поля в нашу форму.
Для примера создадим в интерактивном режиме форму с тремя полями для ввода - имя, фамилия и возраст:

    >>> f = Form()
    >>> f.first_name = Text()
    >>> f.last_name = Text()
    >>> f.age = Text()
    >>> print f

Мы получили на экране HTML представление нашей формы:

    <form method="POST" accept-charset="UTF-8" name="Form" class="pony">
    <input type="hidden" name="_t" value="1392d2d::Sq2Qs1OOZ1E=:wqSaB2MPvfOrZBs64TLRaMvj/e4=" class="ticket-field">
    <input type="hidden" name="_f" value="Form" class="hidden-field">
    <table>
    <tr class="text-field-row">
    <th><label for="id_0">First name<span class="colon">:</span></label></th>
    <td><input class="text-field" type="text" id="id_0" value="" name="first_name"></td></tr>
    <tr class="text-field-row">
    <th><label for="id_1">Last name<span class="colon">:</span></label></th>
    <td><input class="text-field" type="text" id="id_1" value="" name="last_name"></td></tr>
    <tr class="text-field-row">
    <th><label for="id_2">Age<span class="colon">:</span></label></th>
    <td><input class="text-field" type="text" id="id_2" value="" name="age"></td></tr>
    <tr><td>&nbsp;</td><td><div class="buttons"><input type="submit">
    </div></td></tr>
    </table>
    </form>    

В этом примере мы видим, что Пони автоматически сделала для нас несколько вещей.
Пони отображает поля формы в виде таблицы, предоставляя возможность изменять вид формы с
помощью CSS. Названия полей (First name, Last name, Age) генерируются автоматически согласно
указанным в питоновском коде.
Пони - гибкий фреймворк и поэтому те вещи, которые делаются автоматически или по умолчанию, можно
изменить. Изменения можно делать либо с помощью указания параметров элементов, либо с помощью CSS.
Если, скажем, мы хотим иметь другие названия полей, то мы можем указать эти названия
явно при создании формы:

    >>> f.first_name = Text(label="Another label")
    >>> print f.first_name
    Another label<input class="text-field" type="text" id="id_4" value="" name="first_name">

А если мы не хотим, чтобы после названия поля выводилось двоеточие, или хотим как то видоизменить представление
этого символа, то мы можем создать соответствующее CSS правило.
    
В формах могут быть поля, которые обязательны для заполнения. В этом случае при создании поля в Пони мы
можем указать параметр required = True:

    f.first_name = Text(label="Another label", required = True)

........    

При работе с формой, функция, которая конструирует форму вызывается более одного раза.
Когда пользователь открывает страницу, которая содержит форму, соответствующая функция в нашей программе 
конструирует форму и присваивает указанные в программе значения полям (или значения по умолчанию).
Когда форма передается на сервер, например посредством нажатия кнопки "submit" на форме, та же самая функция 
конструирует форму и устанавливает введенные пользователем значения элементов.
Кроме того, у формы и у элементов формы устанавливаются значения для атрибутов `is_submitted` и `is_valid`.

`is_submitted` приобретает значение True, если значения элементов отражают введенные пользователем 
данные (форма передана от пользователя)
`is_submitted` приобретает значение False, если элементы были сконструированы используя указанные в программе
значения (форма сгенерирована для отображения пользователю) 

`is_valid` приобретает значение True, если форма отражает введенные пользователем данные (была передана от пользователя),
все поля, указанные как обязательные (required) были заполнены и поставленные условия для значений полей были выполнены.
`is_valid` приобретает значение False, если форма не была принята от пользователя, либо если значения полей не удовлетворяют
поставленным условиям.





Еще один способ создания форм
-----------------------------

Если нам нужно отобразить одну и ту же форму в нескольких местах или мы хотим написать собственную
функцию проверки правильности заполения формы, мы можем создать собственный класс формы, наследуя
от класса Form из Пони:

    >>> class MyForm(Form):
    ...     def __init__(self):
    ...         self.first_name = Text(required=True)
    ...         self.last_name = Text()
    ...         self.age = Text(type=int)
    ...     def validate(self):
    ...         age = self.age.value
    ...         if age is None: pass
    ...         elif age < 10: self.age.error_text = "Must be 10 at least"
    ...         elif age > 120: self.age.error_text = "Must not be greater then 120"
    ...     def on_submit(self):
    ...         http.session['fname'] = self.first_name.value
    ... 
    >>> @webpage('/')
    ... def index():
    ...     f = MyForm()
    ...     print f
    ... 
    >>> 



Помимо стандартной разметки HTML форма может содержать следующие элементы:

    Hidden
    File
    Password
    Text
    DatePicker
    StaticText
    TextArea
    Checkbox
    Select
    RadioGroup
    MultiSelect
    CheckBoxGroup
    Composite
    Grid
    Submit and Reset buttons

Параметры формы
---------------


