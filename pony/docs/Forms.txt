Формы
=====

* [Что такое форма](#whatis)
* [Создание формы в Пони](#create)
* [Отображение формы на странице](#show)
* [Обработка формы](#process)
* [Проверка данных формы](#validation)
* [Сообщения об ошибках](#errors)
* [Безопасность данных](#security)
* [Повторная отсылка формы и Редирект](#redirect)
* [Поля формы](#fields)
* [Безопасные формы](#secureforms)
* [Вывод формы по частям](#split)
* [Формы на несколько экранов (step by step forms)](#stepbystep)
* [Наследование форм](#inherit)

<a name="whatis">Что такое форма</a>
---------------
HTML форма - это набор элементов, которые позволяют пользователю ввести данные и передать эти данные на сервер.
В HTML странице форма представляется как набор тэгов, заключенных между тэгами формы *form*.
Так выглядит HTML код для простой формы с одним полем для ввода и кнопкой для отсылки формы: 

    <form action="." method="GET" >
      <input type="text" name="name">
      <input type="submit">
    </form>

Открывающий форму тэг form в этом примере содержит два атрибута: action и method.
Атрибут action определяет URL, куда будут переданы данные когда пользователь отошлет форму (произведет submit).
Значение атрибута action = "." означает, что адрес для отсылки эквивалентен адресу, откуда получена сама форма. 
Атрибут method определяет способ, которым эти данные будут переданы на сервер. Возможные значения - GET или POST.

Метод GET используется когда передаваемые через форму данные не изменяют хранимую на сервере информацию.
Например, в форме пользователю предлагается выбрать город, для которого с сервера затем будут переданы какие то записи.
При этом данные пересылаются в строке URL.

Метод POST используется когда передаваемые через форму данные изменяют хранимую на сервере информацию
Например, когда форма содержит данные для регистрации на сайте. В случае POST данные пересылаются как часть тела
HTTP запроса.

<a name="create">Создание формы в Пони</a>
------------------------------------------
Пони позволяет достаточно просто создавать формы используя класс Form, а затем автоматически генерировать
HTML код, который отображается на HTML странице. Питон - динамический язык и это его свойство позволяет нам
добавлять атрибуты в объект в любой момент.

Создадим простешую форму с помощью Пони. В интерактивном режиме наберем следующий код:

    >>> from pony.main import *
    >>> f = Form()
    >>> f.first_name = Text()
    >>> print f

Здесь мы импортируем необходимые компоненты из pony.main, затем создаем экземпляр формы и добавляем поле name.
Команда *print f* отображает на экране HTML код, который будет сгенерирован при отображении формы на странице.
Для этого примера HTML код будет таким:

    <form method="POST" accept-charset="UTF-8" name="Form" class="pony">
    <input type="hidden" name="_t" value="1393761::eH8kYcgDTMs=:j1sMCZqY+mjwTl7EGFFVgFjiOxU=" class="ticket-field">
    <input type="hidden" name="_f" value="Form" class="hidden-field">
    <table>
    <tr class="text-field-row">
    <th><label for="id_0">First name<span class="colon">:</span></label></th>
    <td><input class="text-field" type="text" id="id_0" value="" name="first_name"></td></tr>
    <tr><td>&nbsp;</td><td><div class="buttons"><input type="submit">
    </div></td></tr>
    </table>
    </form>    

Рассмотрим код формы более подробно.
В первой строчке мы видим открываыющий тэг для формы form, а затем несколько аттрибутов.
Некоторые атрибуты (action и method) нам уже знакомы. Атрибут accept-charset задает кодировку для символов в форме.
Аттрбут name - имя формы, служит для того, чтобы можно было идентифицировать эту форму используя javascript или css.
Аттрибут class позволяет связать форму с css правилами.
Более подробная информация о возможных аттрибутах и их значениях доступна здесь
[www.w3.org](http://www.w3.org/TR/html401/interact/forms.html#h-17.3).

По умолчанию Пони создает форму с методом пересылки данных POST. Если вам нужна форма с методом передачи GET,
вам нужно указать это в конструкторе формы:

    f = Form(method = "GET")

Более подробно возможные параметры при создании формы будут рассмотрены далее.             

Строчка

    <input type="hidden" name="_t" value="1392b9b::J2i7/0n12A8=:wxFX1RsvVc0MjyeUL6M37jx2Gzs=" class="ticket-field">

содержит информацию о тикете для этой формы. Подробное описание можно найти здесь [Безопасные формы](#secureforms)
Строчка

    <input type="hidden" name="_f" value="Form" class="hidden-field">

содержит информацию о классе формы в Пони. Эта информация используется при конструировании формы на сервере.
Далее в коде формы идет HTML код, который описывает визуальное представление формы на странице.
Чтобы все поля формы и их названия были одинаковыми по ширине и хорошо смотрелись форма представлена в виде таблицы. 
Благодаря CSS правилами для элементов формы (например class="text-field-row", class="text-field", и т.д.)
у вас появляется возможность изменять вид формы и ее элементов по вашему желанию.

Вы могли заметить, что в форме у поля есть название:

    <label for="id_0">First name<span class="colon">:</span></label>

Название полей в форме генерируются автоматически согласно имени поля в питоновском коде.
Первая буква заменяется на заглавную, а вместо символа подчеркивания ставится пробел.

В конце, в HTML коде нашей формы располагается кнопка, нажатие которой приводит к отсылке значений полей формы на сервер.
Если вы не указали название кнопки явно, то используется название по умолчанию, которое подставит браузер.
Пони - гибкий фреймворк и поэтому те вещи, которые делаются автоматически или по умолчанию, можно
изменить. Изменения можно делать либо с помощью указания параметров элементов, либо с помощью таблицы стилей CSS.
Если, скажем, мы хотим иметь другие названия полей, то мы можем указать эти названия
явно при создании формы:

    >>> f.first_name = Text(label="Another label")
    >>> print f.first_name
    <label for="id_1">Another label<span class="colon">:</span></label>
    <input class="text-field" type="text" id="id_1" value="" name="first_name">

А если мы не хотим, чтобы после названия поля выводилось двоеточие, или хотим как то видоизменить представление
этого символа, то мы можем создать соответствующее правило в таблице стилей CSS.

<a name="show">Отображение формы на странице</a>
------------------------------------------------
Давайте теперь посмотрим как форма отображается на экране у пользователя.
Для этого нам нужно ввести следующий код в интерактивном режиме:

    >>> @webpage('/')
    ... def form_example():
    ... 	f = Form()
    ...     f.first_name = Text()
    ...     f.last_name = Text()
    ...     f.age = Text()
    ... 	print f
    ... 
    >>> http.start()
    Starting HTTP server at localhost:8080

Здесь мы создали функцию-обработчик страницы по адресу '/', то есть заглавной страницы нашего тестового веб-сайта.
Эта функция создает форму и выводит ее в ответ на запрос к нашей странице.
Далее мы запускаем веб сервер из интерактивного режима и открываем станицу с адресом http://localhost:8080 в браузере.

![Form1](/pony/static/img/doc/form1.png)

<a name="process">Обработка формы</a>
-------------------------------------
При работе с формой, функция, которая конструирует форму вызывается более одного раза.
Когда пользователь открывает страницу, которая содержит форму, соответствующая функция в нашей программе 
конструирует форму и присваивает указанные в программе значения полям (или значения по умолчанию).
Когда форма передается на сервер, например посредством нажатия кнопки "submit" на форме, та же самая функция 
конструирует форму и устанавливает введенные пользователем значения элементов.
Кроме того, у формы и у элементов формы устанавливаются значения для атрибутов `is_submitted` и `is_valid`.

`is_submitted` приобретает значение True, если значения элементов отражают введенные пользователем 
данные (форма передана от пользователя)
`is_submitted` приобретает значение False, если элементы были сконструированы используя указанные в программе
значения (форма сгенерирована для отображения пользователю) 

`is_valid` приобретает значение True, если форма отражает введенные пользователем данные (была передана от пользователя),
все поля, указанные как обязательные (required) были заполнены и поставленные условия для значений полей были выполнены.
`is_valid` приобретает значение False, если форма не была принята от пользователя, либо если значения полей не удовлетворяют
поставленным условиям.

<a name="validation">Проверка данных формы</a>
----------------------------------------------
Часто после того, как пользователь ввел данные нам нужно проверить, удовлетворяют ли они нашим условиям.
Форма в Пони инкапсулирует в себе функцию проверку полей на правильность заполнения.
Если вам нужно указать в форме поле, которое обязательно для заполнения, то нужно указать параметр
*required = True* при создании поля формы:
    
    >>> f = Form()
    >>> f.first_name = Text(required = True)
    >>> print f.first_name
    <label for="id_1">First name<sup class="required">*</sup><span class="colon">:</span></label>
    <input class="text-field" type="text" id="id_1" value="" name="first_name">

Пони автоматически добавляет символ `*`, который показывает пользователю, что это поле обязательно для заполнения.
кроме того, при отсылке формы на сервер, Пони проверит, что это поле было заполнено.
Другим условием для поля может быть требование, чтобы значение было числом. Для этого вам нужно указать
для поля параметр *type = int*

Давайте теперь посмотрим что произойдет, если мы оставим обязательное для заполнения поле пустым и введем текст
в числовое поле при отсылке формы.
Для этого добавим параметры *required* и *type* в поля нашей тестовой формы:

    >>> @webpage('/')
    ... def form_example():
    ... 	f = Form()
    ...     f.first_name = Text(required = True)
    ...     f.last_name = Text()
    ...     f.age = Text(type = int)
    ... 	print f

Теперь нажмем на форме кнопку "Отправить":

![Required field](/pony/static/img/doc/formRequired.png)

При прохождении проверки на стороне сервера Пони обнаружила, что поле, которое является обязательным
не заполнено, а поле, которое должно быть числовым содержит символы и передала информацию об этом в браузер.
Порядок событий такой:
Клиент нажимает кнопку "Отправить" (submit) и предает форму на сервер.
Функция получает управление и создает форму (f = Form()) и добавляет поля first_name, last_name, age.
Пони определяет, что это вызов формы с данными от пользователя и заполняет поля класса формы значениями,
которые передал пользователь. После этого выполняется проверка, результатом которой будет отображение
пользователю формы, в которой указаны ошибки допущенные пользователем.

Если вы указываете парамеры поля которым оно должно соответствовать в конструкторе поля, то проверка
будет осуществлена во время констурирования формы и сообщение об ошибке будет сгенерировано автоматически.
Такими параметрами являются

    * required = True
    * type = int

Если вы хотите наложить дополнительные ограничения на значения полей, вам нужно написать код, который произведет
необходимые проверки и, в случае если значения не удовлетворяют условиям, сообщит об этом пользователю.
Сделать это очень просто.

<a name="errors">Сообщения об ошибках</a>
--------------------
Если форма не прошла проверку на сервере, необходимо сообщить пользователю о допущенных ошибках, чтобы
он мог их исправить. Для этой цели у каждого поля и у формы есть свойство error_text.
Допустим, мы хотим быть уверенными, что пользователь не ввел отрицательное значение в поле age.
Сделаем соответствующую проверку:

    >>> @webpage('/')
    ... def form_example():
    ... 	f = Form()
    ... 	f.first_name = Text(required = True)
    ... 	f.last_name = Text()
    ... 	f.age = Text(type = int)
    ... 	if f.is_submitted:
    ... 		if f.age.value <= 0:
    ... 			f.age.error_text = u"Возраст не может быть отрицательным"
    ... 	print f

Теперь откроем снова форму в браузере, введем тестовое значение в поле age и отправим форму:

![Error](/pony/static/img/doc/formError.png)


<a name="security">Безопасность данных</a>
------------------------------------------
Escape

<a name="redirect">Повторная отсылка формы и Редирект</a>
----------------------------------
Если принятные сервером данные формы прошли проверку, форма считается принятой и в этом случае
свойства `is_submitted` и `is_valid` для формы и для каждого поля принимают значение `True`.
Пользователь имеет возможность обновить содержимое страницы (например нажав клавишу F5 в браузере) в любой момент.
Если он нажмет клавишу F5 сразу же после успешной отсылки формы это приведет к повторной отсылке тех же самых
данных. Это может привести к нежелательным последствиям. Например, если пользователь заполнил форму и
произвел платеж, то в результате повторной отсылки формы пользователь произведет платеж дважды.
Многие браузеры имеют защиту от возникновения такой ситуации и запрашивают подтверждения повторной отсылки данных
если это форма с методом отсылки POST.

![Resend](/pony/static/img/doc/resendChrome.png)

Чтобы избежать такой ситуации функции обработки формы следует сделать редирект на другую страницу,
где пользователю сообщается о том, что его данные были успешно приняты. В этом случае обновление страницы
не повлечет за собой никаких последствий.

<a name="fields">Поля формы</a>
-------------------------------
    Hidden
    File
    Password
    Text
    DatePicker
    StaticText
    TextArea
    Checkbox
    Select
    RadioGroup
    MultiSelect
    CheckBoxGroup
    Composite
    Grid
    Submit and Reset buttons

<a name="secureforms">Безопасные формы</a> 
------------------------------------------
HTML формы могут подвергнуться атакам таким как Cross Site Scripting (CSS).
Чтобы избежать этого Пони предоставляет возможность защитить формы с помощью специального алгоритма.

<a name="split">Вывод формы по частям</a>
-----------------------------------------


<a name="inherit">Наследование форм</a>
---------------------------------------

Если нам нужно отобразить одну и ту же форму в нескольких местах или мы хотим написать собственную
функцию проверки правильности заполения формы, мы можем создать собственный класс формы, наследуя
от класса Form из Пони:

    >>> class MyForm(Form):
    ...     def __init__(self):
    ...         self.first_name = Text(required=True)
    ...         self.last_name = Text()
    ...         self.age = Text(type=int)
    ...     def validate(self):
    ...         age = self.age.value
    ...         if age is None: pass
    ...         elif age < 10: self.age.error_text = "Must be 10 at least"
    ...         elif age > 120: self.age.error_text = "Must not be greater then 120"
    ...     def on_submit(self):
    ...         http.session['fname'] = self.first_name.value
    ... 
    >>> @webpage('/')
    ... def index():
    ...     f = MyForm()
    ...     print f
    ... 
    >>> 





