Формы
=====

Если веб-приложению нужно получить какую то информацию от пользователя, например данные для регистрации
аккаунта или загрузить файл на сервер, для этой цели используются формы.

Для демонстрации работы форм в Пони наберем следующий код в интерактивном режиме:

    >>> @webpage('/')
    ... def example():
    ... 	f = Form()
    ... 	f.first_name = Text(required = True)
    ... 	f.last_name = Text()
    ... 	f.email = Text(type = 'email')
    ... 	if f.is_valid:
    ... 		print u"<h1>Привет ", f.first_name.value, f.last_name.value, "!</h1>"
    ... 	else:
    ... 		print f.html
    ... 
    >>> http.start()
    Starting HTTP server at localhost:8080

Теперь откроем в браузере страницу по адресу http://localhost:8080. В окне браузера мы увидим форму:

![form1](/pony/static/img/doc/form0.png)

Пони построила форму согласно написанному нами коду.
Поля формы выровнены по ширине, кроме того Пони отобразила названия полей
(`First Name`, `Last Name`, `Email`) автоматически, согласно имени полей в коде и кнопку для
отправления формы (`Отправить`).
Поле `Last Name` обязательно для заполнения и это отображается общепринятым способом - с помощью
символа <font color="red">`*`</font>.

Чтобы отобразить на странице произвольные названия полей, нужно задать их при создании поля.
Если мы сейчас наберем в интерактивном режиме новый код для той же самой функции-обработчика и шаблона URL,
то новый код заместит старый:

    >>> @webpage('/')
    ... def example():
    ... 	f = Form()
    ... 	f.first_name = Text(u"Имя", required = True)
    ... 	f.last_name = Text(u"Фамилия")
    ... 	f.email = Text(type = 'email')
    ... 	if f.is_valid:
    ... 		print u"<h1>Привет ", f.first_name.value, f.last_name.value, "!</h1>"
    ... 	else:
    ... 		print f.html

Когда в Пони нам нужно ввести символы, отличные от английского алфавита, следует использовать
строки `unicode`. Для этого перед строчкой текста на русском ставится символ `u`.
Откроем теперь нашу страницу:

![form1](/pony/static/img/doc/form1.png)

Теперь название по умолчанию получило только поле Email.

Давайте теперь попробуем заполнть форму: введем фамилию и что-нибудь в поле Email.
Посмотрим что произойдет, если мы нажмем кнопку "Отправить":

![form2](/pony/static/img/doc/form2.png)

Пони сообщает нам, что при заполнении формы возникли ошибки. Верхнее сообщение - это сообщение для формы целиком,
более детальное описание допущенных ошибок отображается рядом с каждым полем формы.

Давайте теперь подойдем к делу более ответственно и заполним необходимые поля:

![form3](/pony/static/img/doc/form3.png)

Исправив ошибки, отправляем форму снова. Теперь ошибок нет и мы видим приветствие:

![form4](/pony/static/img/doc/form4.png)

Давайте разберемся что происходит в этом примере.

Генерация HTML
--------------
Пони позволяет достаточно просто создавать формы используя класс `Form`, а затем автоматически генерировать
HTML код, который отображается на HTML странице. 

В нашем примере мы импортируем необходимые компоненты из pony.main, затем создаем экземпляр формы (`f = Form()`)
и добавляем в форму поля `first_name`, `last_name` и `email`. Если в конструкторе поля не укзывать название
поля, то Пони автоматически генерирует название поля в форме из имени поля в коде. В нашем примере название
поля формы Email сгенерировано таким образом. Названия полей `Имя` и `Фамилия` мы задаем в конструкторе:
`u"Имя"`, `u"Фамилия"`. Буква `u` здесь показывает, что текст представляется в кодировке Unicode, это
самый удобный способ работать с любыми не латинскими алфавитами.   

Далее в коде идет проверка - если форма заполнена и при ее
заполнении не обнаружено ошибок (`if f.is_valid`), то выводится приветствие, а иначе выводится HTML код формы.
В примере видно, что при генерации HTML Пони автоматически добавляет символ `*` рядом с полем `Фамилия`, который
показывает пользователю, что это поле обязательно для заполнения. 

Проверка данных формы и вывод результата
----------------------------------------
Перед тем как использовать данные, полученные от пользователя, нужно проверить, что это именно те данные, которые
ожидает наше приложение. Проверка выполняется на сервере, и если форма не прошла проверку, 
пользователю сообщается о допущенных ошибках, чтобы он мог их исправить.
Пони производит проверку согласно заданным нами условиям при создании полей.
В нашем примере мы задаем такие условия: поле `Имя` должно быть
обязательно заполнено, а в поле `Email` должен быть введен правильный e-mail адрес.
Если эти условия не выполняются, то форма
не принимается и пользователю выводится та же форма с указанием на ошибки.
Этот процесс повторяется до тех пор, пока введенная информация не
будет удовлетворять заданным условиям.

Если полученные данные прошли проверку, атрибут `is_valid` принимает значение `True`.
Теперь наше приложение может обработать введенную пользователем информацию.
Полученные значения содержатся в атрибуте поля `value`.

Процесс обработки формы
-----------------------
При работе с формой, функция, которая конструирует форму вызывается более одного раза.
Когда пользователь открывает страницу, которая содержит форму, функция `example()` в нашей программе 
конструирует форму и присваивает указанные в программе значения полям (или значения по умолчанию).
Когда форма передается на сервер посредством нажатия кнопки "Отправить" на форме, та же самая функция `example()`
конструирует форму и устанавливает введенные пользователем значения элементов.
Кроме того, у формы и у элементов формы устанавливаются значения для атрибутов `is_submitted` и `is_valid`.
Атрибут `is_submitted` приобретает значение False на первом этапе, когда форма сгенерирована для отображения пользователю
(элементы были сконструированы, используя указанные в программе значения).
Атрибут `is_submitted` приобретает значение True, если форма была сконструирована на основе принятой от пользователя информации
(значения элементов отражают введенные пользователем данные).
Атрибут `is_valid` приобретает значение True, если форма была принята от пользователя и успешно прошла проверку(введенные значения удовлетворяют
поставленным условиям) и False, если форма не была принята от пользователя, либо если значения полей не удовлетворяют
заданным условиям.

Теперь после краткого введения мы можем сосредоточиться на каждом аспекте более детально.

[Поля формы](#formfields)
[Аттрибуты формы](#formattrs)
[Обработка данных формы и генерация сообщений об ошибках](#checkdata)  
[Стилизация формы](#style)
[Генерация HTML](#generatehtml)
[Изменение HTML представления формы](#changehtml)  
[Безопасные формы](#safeforms)  
[Многостраничные формы](#pages)  
[Несколько форм на одной странице](#multiple)  
[Наследование форм(Процесс обработки форм)](#inheritance)  

<a name="formfields"></a>
Поля формы
----------
Форма может содержать различные элементы для ввода информации.  

Аттрибуты, которые есть у каждого поля формы:
value - то значение, которое ввел пользователь, или начальное значение, которое отображается при генерации формы пользователю
is_valid - True если поле заполнено правильно и False если нет
is_submitted - !показывает было ли это поле передано от пользователя!
error_text - в этом аттрибуте можно установить сообщение об ошибке, которое будет выведено вместе с этим полем
label - это название поля, которое отображается на странице
name - поле получает значение автоматически, когда поле присваивается форме. Это аттрибут визуально не отображается в форме.
Он предназначен для внутреннего использования. Этот аттрибут полезен, если мы хотим работать со словарем данных формы.
Более подробно это описано ниже.
form - если поле было присвоено форме, в этом аттрибуте содержится указатель на форму
required - если значение этого аттрибута `True`, то поле обязательно для заполнения. Визуально это отображается
специальным знаком `*`

У каждого типа поля есть параметры, которые можно указать при его создании. Если в программе мы указыаем параметр,
который не предусмотрен для этого поля, это значение отображается в коде HTML
__привести пример и может написать более понятно__


Поле **Text** представляет собой однострочное поле для ввода текста. Возможные параметры этого поля:  
value - задает начальное значение поле, которое будет отражено в форме  
required - указывает, что поле обязательно для заполнения. Визуально это отображается как символ `*` рядом с полем,
а при передаче формы на сервер проверяется, что в поле заполнено  
label - с помощью этого параметра можно задать текст, который отображается рядом с полем  
type - задает тип поля. При сабмите формы Пони конвертирует введенное пользователем значение к указанному типу.
Если конвертация не удается, у поля устанавливается соответствующее сообщение об ошибке  
regex - этот атрибут позволяет задать регулярное выражение, которому должно соответствоать введенное значение.
Если введенное значение не соответствует регулярному выражению, то значение этого поля считается некорректным,
и аттрибут `is_valid` приобретает значение `False`

Все поля формы могут принимать в качестве параметра HTML атрибуты, специфичные для этого поля. Например параметр `size`
указывает ширину текстового поля  
Более подробную информацию про стандартные HTML атрибуты можно найти [здесь](http://www.w3.org/TR/html401/interact/forms.html#h-17.4)

Поле **Password** во всем аналогично полю **Text**, разница лишь в том, что все вводимые символы представляются в виде _*_, чтобы
скрыть вводимый текст

Поле **Hidden** это тоже текстовое поле, но оно не отображается на форме визуально и используется когда нужно сохранить в
форме информацию о состоянии. Этот способ передачи данных в форме может быть альтернативой использованию HTTP сессии и HTTP Cookies

Поле **File** дает возможность пользователю передать файл на сервер

Поле **TextArea** похоже на поле **Text**, только визуально представляется как несколько строчек текста
    
Поле **DatePicker** служит для ввода даты и по сути текстовое поле, но когда поле получает фокус, открывается javascript
виджет - календарь, который позволяет удобно выбрать дату 

Поле **StaticText** просто отображет текст, это не поле для ввода  




<a name="formattrs"></a>
###Аттрибуты формы
                                                                             


###Select
                                                                            
Поля **Select** и **MultiSelect** позволяют пользователю выбрать значение из списка. С помощью **MultiSelect** можно выбрать
более одного значения

В этом примере мы хотим предложить пользователю список вариантов подписки на новости компании.
Код для Пони:

    Select(u'Подписка', options=[u'Нет', u'Только новости', u'Новости и предложения'])

отображение на странице:  
<table>
<tr class="select-field-row">
<th><label for="id_0">&#1055;&#1086;&#1076;&#1087;&#1080;&#1089;&#1082;&#1072;<span class="colon">:</span></label></th>
<td><select id="id_0" name="period" size="1"><option>&#1053;&#1077;&#1090;</option><option>&#1058;&#1086;&#1083;&#1100;&#1082;&#1086; &#1085;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080;</option><option>&#1053;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080; &#1080; &#1087;&#1088;&#1077;&#1076;&#1083;&#1086;&#1078;&#1077;&#1085;&#1080;&#1103;</option></select></td></tr>
</table>

Значением списка по умолчанию является первый вариант из списка, в нашем примере это 'Нет'.
Чтобы отражалось другое значение по умолчанию, скажем 'Новости и предложения', нужно это указать таким образом:
                                                                             
    Select(u'Подписка', options=[u'Нет', u'Только новости', u'Новости и предложения'], value=u'Новости и предложения')

тогда этот список будет отображен на форме так:
<table>
<tr class="select-field-row">
<th><label for="id_1">&#1055;&#1086;&#1076;&#1087;&#1080;&#1089;&#1082;&#1072;<span class="colon">:</span></label></th>
<td><select id="id_1" name="period" size="1"><option>&#1053;&#1077;&#1090;</option><option>&#1058;&#1086;&#1083;&#1100;&#1082;&#1086; &#1085;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080;</option><option selected>&#1053;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080; &#1080; &#1087;&#1088;&#1077;&#1076;&#1083;&#1086;&#1078;&#1077;&#1085;&#1080;&#1103;</option></select></td></tr>
</table>

Иногда мы хотим чтобы в списке отображался текст, а значением было нечто другое (например число или объект).
В этом случае в списке _options_ можно указывать пары первым элементом которой является объект, а вторым -
текст для отображения на экране.
В нашем примере, если программа сохраняет выбранное
значение в базе данных, то нам было бы удобно сопоставить какой то код каждому значению. Например таким образом:

* Нет - 0
* Только новости - 1
* Новости и предложения - 2

Можно анализировать значение поля в программе и сопоставлять код каждому значению, но намного удобнее
сопоставить код в самом списке:

    Select(u'Подписка', options=[ (0, u'Нет'), (1, u'Только новости'), (2, u'Новости и предложения')], value=2)
                                                                             
На странице этот список отображается без изменений, но когда пользователь отсылает значение на сервер, значением
элемента становится число (0, 1 или 2)

Поле **MultiSelect** позволяет выбрать несколько значений из списка удерживая клавишу 'Ctrl'

    MultiSelect(u'Подписка', options=[ (0, u'Новости'), (1, u'Предложения'), (2, u'Пресс релизы')], value=[0,1]))

<table>
<tr class="multiselect-field-row">
<th><label for="id_3">&#1055;&#1086;&#1076;&#1087;&#1080;&#1089;&#1082;&#1072;<span class="colon">:</span></label></th>
<td><select multiple id="id_3" size="3"><option selected value="0">&#1053;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080;</option><option selected value="1">&#1055;&#1088;&#1077;&#1076;&#1083;&#1086;&#1078;&#1077;&#1085;&#1080;&#1103;</option><option value="2">&#1055;&#1088;&#1077;&#1089;&#1089; &#1088;&#1077;&#1083;&#1080;&#1079;&#1099;</option></select></td></tr>
</table>




###Checkbox

Поле **Checkbox** это переключатель, который отображается в виде поля, где можно поставить галочку и
имеет два состояния - включено и выключено. Значением такого элемента является True или False.

    Checkbox(u'Я хочу получать новости', value=True)

<table>
<tr class="checkbox-field-row">
<th><label for="id_4">&#1071; &#1093;&#1086;&#1095;&#1091; &#1087;&#1086;&#1083;&#1091;&#1095;&#1072;&#1090;&#1100; &#1085;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080;<span class="colon">:</span></label></th>
<td><input checked type="checkbox" id="id_4" value="yes" name="period"></td></tr>
</table>




###CheckboxGroup

Для отображения группы переключателей используется **CheckboxGroup**. Это поле эквивалентно MultiSelect,
отличие лишь в отображении на экране.

    CheckboxGroup(u'Категории новостей', options=[ (1, u'Еженедельные выпуски'), (2, u'Ежемесячные выпуски'), (3, u'Срочные сообщения') ], value=[ 2, 3 ])

<table>
<tr class="checkboxgroup-field-row">
<th><label for="id_5">&#1050;&#1072;&#1090;&#1077;&#1075;&#1086;&#1088;&#1080;&#1080; &#1085;&#1086;&#1074;&#1086;&#1089;&#1090;&#1077;&#1081;<span class="colon">:</span></label></th>
<td><div class="checkboxes" id="id_5" size="3"><div class="checkboxgroup-item"><input type="checkbox" name="period" value="1"><span class="value">&#1045;&#1078;&#1077;&#1085;&#1077;&#1076;&#1077;&#1083;&#1100;&#1085;&#1099;&#1077; &#1074;&#1099;&#1087;&#1091;&#1089;&#1082;&#1080;</span></div><div class="checkboxgroup-item"><input type="checkbox" checked name="period" value="2"><span class="value">&#1045;&#1078;&#1077;&#1084;&#1077;&#1089;&#1103;&#1095;&#1085;&#1099;&#1077; &#1074;&#1099;&#1087;&#1091;&#1089;&#1082;&#1080;</span></div><div class="checkboxgroup-item"><input type="checkbox" checked name="period" value="3"><span class="value">&#1057;&#1088;&#1086;&#1095;&#1085;&#1099;&#1077; &#1089;&#1086;&#1086;&#1073;&#1097;&#1077;&#1085;&#1080;&#1103;</span></div></div><input type="hidden" name=".period" value=""></td></tr>
</table>




###RadioGroup

Если в форме нужно предоставить переключатель для выбора одного значения из множества возможных, используется **RadioGroup**

    RadioGroup(u'Пол', options=[ u'Мужской', u'Женский' ])

<table>
<tr class="radiogroup-field-row">
<th><label for="id_0">&#1055;&#1086;&#1083;<span class="colon">:</span></label></th>
<td><div class="radiobuttons" id="id_0" size="1"><div class="radiobutton"><input type="radio" name="period" value="&#1052;&#1091;&#1078;&#1089;&#1082;&#1086;&#1081;"><span class="value">&#1052;&#1091;&#1078;&#1089;&#1082;&#1086;&#1081;</span></div><div class="radiobutton"><input type="radio" name="period" value="&#1046;&#1077;&#1085;&#1089;&#1082;&#1080;&#1081;"><span class="value">&#1046;&#1077;&#1085;&#1089;&#1082;&#1080;&#1081;</span></div></div><input type="hidden" name=".period" value=""></td></tr>
</table>




###Кнопки

Кроме полей в форме могут быть кнопки. Кнопка **Submit** предназначена для отсылки формы на сервер.
Кнопка **Reset** - для очистки всех полей.

    >>> @webpage('/')
    ... def index():
    ... 	f = Form()
    ... 	f.name = Text()
    ... 	f.sbm = Submit(u'Отправить')
    ... 	f.rst = Reset(u'Сброс') 
    ... 	print f.html

<table>
<tr class="text-field-row">
<th><label for="id_0">Name<span class="colon">:</span></label></th>
<td><input class="text-field" type="text" id="id_0" value="" name="name"></td></tr>
<tr><td>&nbsp;</td><td><div class="buttons"><input type="submit" name="sbm" value="&#1054;&#1090;&#1087;&#1088;&#1072;&#1074;&#1080;&#1090;&#1100;" class="submit-field"><input type="reset" name="rst" value="&#1057;&#1073;&#1088;&#1086;&#1089;" class="reset-field">
</div></td></tr>
</table>


###Composite и Grid    

Элементы формы **Composite** и **Grid** предназначены для визуальной группировки полей и кнопок, которые описаны выше  


<a name="checkdata"></a>
Обработка данных формы и генерация сообщений об ошибках
------------------------------------------------------
При первоначальном отображении формы для каждого поля можно указать начальное значение, задав его в аттрибуте
`value`. 
Когда пользователь
отправляет заполненную форму, Функция, которая сгенерировала форму для отображения на странице вызывается еще раз.
Чтобы отличить один вызов от другого нужно проанализировать значение атрибута
`is_submitted`. Если форма была передана от пользователя, тогда атрибут формы `is_submitted` приобретает
значение `True`, а поля формы содержат значения, которые ввел пользователь.
Теперь аттрибут value всех полей содержит значения, которые ввел пользователь.
Кроме того у каждой формы есть аттрибут `data`, который является словарем ключами которого являются имена полей
а значениями - значения полей. Этот словарь содержит также и скрытые (hidden) поля.

Как мы рассмотрели ранее, при создании полей формы можно указывать условия, которым должно соответствовать значение
поля. Если значения, которые ввел пользователь соответствуют заданным условиям, тогда атрибут формы
`is_valid` приобретает значение `True`. Атрибуты `is_submitted` и `is_valid` есть у формы в целом, а также у
каждого поля формы в отдельности.

Если поле не является валидным, то Пони присваивает полю текст ошибки в аттрибуте `error_text`.
Можно перекрыть стандартное сообщение об ошибке и задать другое сообщение, присвоив его аттрибуту
`error_text`. Аттрибут `error_text` есть у каждого поля по отдельности и у формы в целом.

Если мы попытаемся повторно отобразить пользователю форму, например с указанием допущенных ошибок,
то она сохранит в себе значение тех полей, что указал пользователь. При желании можно подправить
данные, которые указал пользователь присвоив аттрибуту value новое значение.
Если мы не хотим заново отображать введенные пользователем данные, можно очистить форму вызвав метод
`clear`. При этом для полей будут установлены их первоначальные значения.


<a name="generatehtml"></a>
Генерация HTML
--------------
У формы есть свойство (property) html, при каждом обращении к этому свойству генерируется
HTML представление формы в виде строки unicode. Такого же результата можно добиться применя 

html
html_value
tag


<a name="style"></a>
Стилизация формы
----------------
При генерации HTML кода для формы Пони размечает 


<a name="changehtml"></a>
Изменение HTML представления формы
----------------------------------
Иногда возникает необходимость вывести форму не целиком в одном месте, а как то распределить поля на странице.
(пример с фильтрацией полей в таблице?). У объекта формы в Пони есть атрибуты, которые представляют собой
HTML фрагменты формы:
    header выводит открывающий тэг для формы и скрытые (hidden) поля формы
    footer выводит закрывающий тэг для формы
    Чтобы вывести поля формы по отдельности нужно использовать атрибут поля **tag**. Например

    print f.first_name.tag
                          
    table выводит все поля формы в виде тела таблицы, открывающий и закрывающий тэги таблицы сюда не включены    
    hidden_fields позволяет вывести только скрытые поля
    buttons кнопки, которые есть в форме


<a name="safeforms"></a>                          
Безопасные формы
----------------
эскапирование и тикеты
особенность POST
повторная отсылка формы и Редирект raise(http.Redirect("/another_url")))

Многостраничные формы
---------------------
Несколько форм на одной странице
--------------------------------

<a name="inheritance"></a>
Наследование форм(Процесс обработки форм)
-----------------------------------------


