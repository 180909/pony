Формы
=====

HTML формы используются когда веб-приложению нужно получить какую то информацию от пользователя,
например данные для регистрации аккаунта или загрузить файл на сервер.

Для демонстрации работы форм в Пони наберем следующий код в интерактивном режиме:

    >>> @webpage('/')
    ... def example():
    ... 	f = Form()
    ... 	f.first_name = Text(required = True)
    ... 	f.last_name = Text()
    ... 	f.email = Text(type = 'email')
    ...     f.btn = Submit()
    ... 	if f.is_valid:
    ... 		print u"<h1>Привет ", f.first_name.value, f.last_name.value, "!</h1>"
    ... 	else:
    ... 		print f.html
    ... 
    >>> http.start()
    Starting HTTP server at localhost:8080

Теперь откроем в браузере страницу по адресу http://localhost:8080. В окне браузера мы увидим форму:

![form1](/pony/static/img/doc/form0.png)

Пони построила форму согласно написанному нами коду.
Поля формы выровнены по ширине, кроме того Пони отобразила названия полей
(`First Name`, `Last Name`, `Email`) автоматически, согласно имени полей в коде и кнопку для
отправления формы (`Отправить`).
Поле `Last Name` обязательно для заполнения и это отображается общепринятым способом - с помощью
символа <font color="red">`*`</font>.

Чтобы отобразить на странице произвольные названия полей, нужно задать их при создании поля.
Если мы сейчас наберем в интерактивном режиме новый код для той же самой функции-обработчика и шаблона URL,
то новый код заместит старый:

    >>> @webpage('/')
    ... def example():
    ... 	f = Form()
    ... 	f.first_name = Text(u"Имя", required = True)
    ... 	f.last_name = Text(u"Фамилия")
    ... 	f.email = Text(type = 'email')
    ... 	if f.is_valid:
    ... 		print u"<h1>Привет ", f.first_name.value, f.last_name.value, "!</h1>"
    ... 	else:
    ... 		print f.html

Когда в Пони нам нужно ввести символы, отличные от английского алфавита, следует использовать
строки `unicode`. Для этого перед строчкой текста на русском ставится символ `u`.
Откроем снова нашу страницу:

![form1](/pony/static/img/doc/form1.png)

Теперь название по умолчанию получило только поле Email.

Давайте теперь попробуем заполнть форму: введем фамилию и что-нибудь в поле Email.
Посмотрим что произойдет, если мы нажмем кнопку "Отправить":

![form2](/pony/static/img/doc/form2.png)

Пони сообщает нам, что при заполнении формы возникли ошибки. Верхнее сообщение - это сообщение для формы целиком,
более детальное описание допущенных ошибок отображается рядом с каждым полем формы.
Поле "Имя" обозначено как обязательное для заполнения, а текст в поле email который мы ввели не корректен. 
Теперь подойдем к делу более ответственно и правильно заполним необходимые поля:

![form3](/pony/static/img/doc/form3.png)

Исправив ошибки, отправляем форму снова. Теперь ошибок нет и мы видим приветствие:

![form4](/pony/static/img/doc/form4.png)

Давайте разберемся что происходит в этом примере.

Генерация HTML
--------------
Пони позволяет достаточно просто создавать формы используя класс `Form`, а затем автоматически генерировать
HTML код, который отображается на HTML странице. 

В нашем примере мы импортируем необходимые компоненты из pony.main, затем создаем экземпляр формы (`f = Form()`)
и добавляем в форму поля `first_name`, `last_name` и `email`. Если в конструкторе поля не укзывать название
поля, то Пони автоматически генерирует название поля в форме из имени поля в коде. В нашем примере название
поля формы Email сгенерировано таким образом. Названия полей `Имя` и `Фамилия` мы задаем в конструкторе:
`u"Имя"`, `u"Фамилия"`. Буква `u` здесь показывает, что текст представляется в кодировке Unicode, это
самый удобный способ работать с любыми не латинскими алфавитами.   

Далее в коде идет проверка - если форма заполнена и при ее
заполнении не обнаружено ошибок (`if f.is_valid`), то выводится приветствие, а иначе выводится HTML код формы.
В примере видно, что при генерации HTML Пони автоматически добавляет символ `*` рядом с полем `Фамилия`, который
показывает пользователю, что это поле обязательно для заполнения. 

Проверка данных формы и вывод результата
----------------------------------------
Перед тем как использовать данные, полученные от пользователя, нужно проверить, что это именно те данные, которые
ожидает наше приложение. Проверка выполняется на сервере, и если форма не прошла проверку, 
пользователю сообщается о допущенных ошибках, чтобы он мог их исправить.
Пони производит проверку согласно заданным нами условиям при создании полей.
В нашем примере мы задаем такие условия: поле `Имя` должно быть
обязательно заполнено, а в поле `Email` должен быть введен правильный e-mail адрес.
Если эти условия не выполняются, то форма
не принимается и пользователю выводится та же форма с указанием на ошибки.
Этот процесс повторяется до тех пор, пока введенная информация не
будет удовлетворять заданным условиям.

Если полученные данные прошли проверку, атрибут `is_valid` принимает значение `True`.
Теперь наше приложение может обработать введенную пользователем информацию.
Полученные значения содержатся в атрибуте поля `value`.

Процесс обработки формы
-----------------------
При работе с формой, функция, которая конструирует форму вызывается более одного раза.
Когда пользователь открывает страницу, которая содержит форму, функция `example()` в нашей программе 
конструирует форму и присваивает указанные в программе значения полям (или значения по умолчанию).
Когда форма передается на сервер посредством нажатия кнопки "Отправить" на форме, та же самая функция `example()`
конструирует форму и устанавливает введенные пользователем значения элементов.
Кроме того, у формы и у элементов формы устанавливаются значения для атрибутов `is_submitted` и `is_valid`.
Атрибут `is_submitted` приобретает значение False на первом этапе, когда форма сгенерирована для отображения пользователю
(элементы были сконструированы, используя указанные в программе значения).
Атрибут `is_submitted` приобретает значение True, если форма была сконструирована на основе принятой от пользователя информации
(значения элементов отражают введенные пользователем данные).
Атрибут `is_valid` приобретает значение True, если форма была принята от пользователя и успешно прошла проверку(введенные значения удовлетворяют
поставленным условиям) и False, если форма не была принята от пользователя, либо если значения полей не удовлетворяют
заданным условиям.

Теперь после краткого введения мы можем сосредоточиться на каждом аспекте более детально.

[Поля формы](#formfields)
[Аттрибуты формы](#formattrs)
[Обработка данных формы и генерация сообщений об ошибках](#checkdata)  
[Стилизация формы](#style)
[Генерация HTML](#generatehtml)
[Изменение HTML представления формы](#changehtml)  
[Безопасные формы](#safeforms)  
[Многостраничные формы](#pages)  
[Несколько форм на одной странице](#multiple)  
[Наследование форм(Процесс обработки форм)](#inheritance)  

<a name="formfields"></a>
Поля формы
----------
Пони предлагает удобный механизм работы с HTML формами. В коде форма представляется в виде набора объектов - полей формы.
Каждое из этих полей отображается в HTML код при генерации формы.
При создании поля ему можно передать список параметров. Например:

    f = Form()
    f.email = Text('E-mail', required=True, type='email')

Каждое поле имеет аттрибуты, которые можно читать и изменять в программе. Некоторые аттрибуты получают значение на
основе параметров, указанных при создании поля и имеют такие же названия (например required, value, label и т.д. ).
Аттрибуты принимают значения по умолчанию, если их не указывать при создании поля.
Если в программе мы указыаем параметр, который не описан в этой документации как возможный параметр для поля,
Пони считает, что это HTML аттрбут, который нужно отобразить в HTML коде элемента.
Например:

    f.field1 = Text(required = True, size="10")

Здесь параметр `size` не задает никакого значения для объекта Text, но при генерации формы в HTML тэг, соответствующий
объекту Text, будет добавлено `size="10"`. Если в названии параметра встречаются символ `_`, он будет автоматически заменен
на `-`. Например:

    f = Form(accept_charset="cp1251")

Таким образом в HTML код элемента `form` будет включен такой текст:  `accept-charset="cp1251"`.  

Параметры, которые могут быть указаны для каждого поля при его создании: label, required, value. Кроме этих, общих для всех,
у каждого поля есть параметры, которые мы рассмотрим ниже.

Аттрибуты, которые есть у каждого поля формы:
`value`  
Как было описано выше, функция, которая конструирует форму вызывается более одного раза.
Если функция была вызвана для генерации формы для отображения на странице, то это поле содержит установленное программой значение.
Если функция была вызвана при получении результата от пользователя, это поле отражает значение, которое ввел пользователь.

`label`  
Название, которое выводится рядом с полем на странице.

`name`  
Этот аттрибут получает значение автоматически, когда поле присваивается форме. Визуально не отображается на форме.
Служит для обращения к полю посредством javascript в браузере или при работе со словарем формы
(см. [Аттрибуты формы](#formattrs))

`form`  
Когда поле присваивается форме этот аттрибут содержит указатель на форму.

`required`  
Если значение этого аттрибута `True`, то поле обязательно для заполнения. Визуально это отображается
специальным знаком `*`.

`is_valid`  
Получает значение True, если форма, которому принадлежит поле, получена от пользователя и значения всех полей удовлетворяют
заданным условиям. Иначе - значение False.

`is_submitted`  
True, если форма сгенерирована на основе данных, полученных от пользователя.

`error_text`  
Программа может присвоить этому полю текстовое описание ошибки, допущеной пользователем при заполнении формы.
Текст будет выведен рядом с полем при отображении в браузере.
Если для поля заданы условия, которым должно соответствовать введенное пользователем значение (required, type),
Пони на этапе проверки формы автоматически присвоит значение этому полю в случае несоответствия условиям.

`tag`  
Этот аттрибут предназначен только для чтения, он содержит HTML код, благодаря которому поле отображается на странице.

`attrs`  
Это словарь, который содержит HTML атрибуты поля.

### Поле Text

Поле **Text** представляет собой однострочное поле для ввода текста. Возможные параметры этого поля:  
value, required, label - см выше  

`type`  
Задает тип поля. При проверке формы Пони конвертирует введенное пользователем значение к указанному типу.
Если конвертация не удается, у поля устанавливается соответствующее сообщение об ошибке.    

`regex`  
Этот атрибут позволяет задать регулярное выражение, которому должно соответствовать введенное значение.
Если введенное значение не соответствует регулярному выражению, то значение этого поля считается некорректным,
а аттрибут `is_valid` приобретает значение `False`.

Атрибуты type и regex могут быть у любого текстового поля (Password, TextArea, Hidden)

### Поле Password

Поле **Password** во всем аналогично полю **Text**, разница лишь в том, что все вводимые символы представляются в виде _*_, чтобы
скрыть вводимый текст.


### Поле Hidden

Поле **Hidden** это тоже текстовое поле, но оно не отображается на форме визуально и используется когда нужно сохранить в
форме информацию о состоянии. Этот способ передачи данных в форме может быть альтернативой использованию HTTP сессии и HTTP Cookies.


### Поле File

Поле **File** дает возможность пользователю передать файл на сервер. Только 'POST' форма может содержать это поле.
Этому полю нельзя задавать аттрибут 'value'.
Визуально на форме это поле отображается как кнопка и имя выбранного файла рядом с ней. Если не выбран никакой файл,
рядом с кнопкой отображается 'No file chosen'.
Кроме общих для всех, это поле содержит следующие атрибуты:

`filename`  
Только для чтения. Имя выбранного пользователем файла.  


### Поле TextArea

Поле **TextArea** во всем похоже на поле **Text**, только визуально представляется как несколько строчек текста.


### Поле DatePicker
    
Поле **DatePicker** служит для ввода даты и отображается как текстовое поле, но когда поле получает фокус, открывается javascript
виджет - календарь, который удобен при выбре даты. Этому полю не могут быть заданы атрибуты type и regex.


### Поле StaticText

Поле **StaticText** просто отображет текст, это не поле для ввода  
Этому полю не могут быть заданы атрибуты label и required.



<a name="formattrs"></a>
###Аттрибуты формы
Форма может содержать любое количество полей, которые мы рассмотрели выше.
Кроме самих полей, которые представляются в виде атрибутов, у формы есть еще следующие атрибуты: 

`method`  
Задает метод передачи формы на сервер. Может принимать одно из значений 'GET' или 'POST'. Значение по умолчанию - 'GET'

`secure`  
Может принимать значение True только если это форма 'POST'. Подробнее см. [Безопасные формы](#safeforms)

`name`
Задает имя формы. Подробнее см [Несколько форм на одной странице](#multiple)  

`DoNotDoRedirect`  
Указывает будет ли производиться переадресация после успешной передачи формы на сервер.
Подробнее см. [Наследование форм](#inheritance)  

`NotProcessed`  
???

`buttons_align`  
left, right, center

`prevent_resubmit`  
`submit_fields`  
какие значения ???

`attrs`  
Словарь, который содержит HTML аттрибуты тэга form(кроме заданных при создании формы по умолчанию - accept-charset, class, method).
Этот словарь можно читать и добавлять в него данные,
которые затем отобразятся в тэге form при генерации формы. 

`error_text`  
Текстовое описание ошибки, допущенной пользователем при заполнении формы.
На этапе проверки формы Пони автоматически присваивает значение этому полю в случае несоответствия условиям.
Этому полю можно также присвоить произвольное значение.

`data`  
Словарь, который содержит все поля формы(в том числе скрытые) и их значения.
С помощью этого поля можно присвоить начальные значения произвольным полям формы.

`fields`  
Список, который содержит все не скрытые(hidden) поля формы.

`hidden_fields`  
Список, который содержит все скрытые(hidden) поля формы.

`html`  
HTML представление формы. Значение этого поля предствляет собой код, который будет отображаться на странице.

В некоторых случаях удобно вывести форму не сразу целиком на странице, а по частям
(см. [Изменение HTML представления формы](#changehtml) )
Для этого Пони предусматривает следующие атрибуты формы: header, table, buttons, footer.

`header`  
Содержит HTML код открывающего тэга формы и скрытые поля.

`table`  
Содержит HTML код всех полей формы. Поля представлены в виде HTML таблицы

`buttons`  
Содержит HTML код всех кнопок формы.

`footer`  
Содержит HTML код закрывающего тэга формы.

У формы, также как у каждого поля есть два аттрибута, которые показывают были ли данные формы получены от пользователя
и корректны ли эти данные.

`is_submitted`  
True если форма была получена от пользователя. False если форма была сгенерирована программно.

`is_valid`  
True если форма была получена от пользователя и проверка данных всех полей прошла успешно.
False если проверка данных формы не увенчалась успехом или форма была сгенерирована программно.

`tag`  
Выводит HTML тэг для формы. Только для чтения.

У формы есть следующие методы:  

`clear`  
Метод, который производит очистку всех полей и устанавливает значения по умолчанию, заданные при создании полей.

`validate`  
Метод, который производит проверку всех полей формы. По результатам проверки устанавливаются значение полей
error_text, is_valid



###Select

                                                                            
Поля **Select** и **MultiSelect** позволяют пользователю выбрать значение из списка. С помощью **MultiSelect** можно выбрать
более одного значения

Этот пример показывает как задать список, который предлагает пользователю список вариантов подписки на новости компании.

    Select(u'Подписка', options=[u'Нет', u'Только новости', u'Новости и предложения'])

отображение на странице:  
<table>
<tr class="select-field-row">
<th><label for="id_0">&#1055;&#1086;&#1076;&#1087;&#1080;&#1089;&#1082;&#1072;<span class="colon">:</span></label></th>
<td><select id="id_0" name="period" size="1"><option>&#1053;&#1077;&#1090;</option><option>&#1058;&#1086;&#1083;&#1100;&#1082;&#1086; &#1085;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080;</option><option>&#1053;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080; &#1080; &#1087;&#1088;&#1077;&#1076;&#1083;&#1086;&#1078;&#1077;&#1085;&#1080;&#1103;</option></select></td></tr>
</table>

Значением списка по умолчанию является первый вариант из списка, в нашем примере это 'Нет'.
Чтобы отражалось другое значение по умолчанию, скажем 'Новости и предложения', нужно это указать таким образом:
                                                                             
    Select(u'Подписка', options=[u'Нет', u'Только новости', u'Новости и предложения'], value=u'Новости и предложения')

тогда этот список будет отображен на форме так:
<table>
<tr class="select-field-row">
<th><label for="id_1">&#1055;&#1086;&#1076;&#1087;&#1080;&#1089;&#1082;&#1072;<span class="colon">:</span></label></th>
<td><select id="id_1" name="period" size="1"><option>&#1053;&#1077;&#1090;</option><option>&#1058;&#1086;&#1083;&#1100;&#1082;&#1086; &#1085;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080;</option><option selected>&#1053;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080; &#1080; &#1087;&#1088;&#1077;&#1076;&#1083;&#1086;&#1078;&#1077;&#1085;&#1080;&#1103;</option></select></td></tr>
</table>

Если, например, наша страница может быть представлена на нескольких языках, то удобно сопоставить каждому значению в списке код.
Можно конечно анализировать текстовое значение поля в программе и таким образом сопоставлять код каждому значению, но намного удобнее
сопоставить код в самом списке.
В этом случае в списке _options_ нужно указать пары. Первым элементом каждой пары является значение, а вторым -
текст для отображения на странице.
В нашем примере мы сопоставим значения таким образом:

* Нет - 0
* Только новости - 1
* Новости и предложения - 2


    Select(u'Подписка', options=[ (0, u'Нет'), (1, u'Только новости'), (2, u'Новости и предложения')], value=2)
                                                                             
На странице этот список отображается без изменений, но значением этого поля на сервере будет 0, 1 или 2.

Пони позволяет 

option - это комбинация (value, description, key)
Например: (100, u"сто", "100")
value - это произвольный питоновский объект, который хранится в списке
description - это текстовое описание, которое на экране видит пользователь
key - это значение, которое передается при отправке формы
Все key внутри списка должны быть уникальными
Сответственно, keys - это dictionary(key -> option)
Все values также должны быть уникальными
values - это dictionary(value -> option)
options - это список значений которые задает пользователь.
Это могут быть тройки типа (value, description, key) например (100, u"сто", "100")
Или двойки типа (value, description) например (100, u"сто"), в этом случае key генерируется автоматически как unicode(value)
Или это просто value, тогда key и description генерируются автоматически как unicode(value)
value - это то конкретное value из множества values, которое выбрал пользователь. Если список представляет собой MultiSelect,
то value - это множество всех выбранных values (возможно пустое)



Поле **MultiSelect** похоже на поле Select. Разница в том, что MultiSelect позволяет выбрать несколько значений из списка удерживая клавишу 'Ctrl'.

    MultiSelect(u'Подписка', options=[ (0, u'Новости'), (1, u'Предложения'), (2, u'Пресс релизы')], value=[0,1]))

<table>
<tr class="multiselect-field-row">
<th><label for="id_3">&#1055;&#1086;&#1076;&#1087;&#1080;&#1089;&#1082;&#1072;<span class="colon">:</span></label></th>
<td><select multiple id="id_3" size="3"><option selected value="0">&#1053;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080;</option><option selected value="1">&#1055;&#1088;&#1077;&#1076;&#1083;&#1086;&#1078;&#1077;&#1085;&#1080;&#1103;</option><option value="2">&#1055;&#1088;&#1077;&#1089;&#1089; &#1088;&#1077;&#1083;&#1080;&#1079;&#1099;</option></select></td></tr>
</table>


### AutoSelect

Это поле во всем аналогично полю Select, только при изменении его значения проиходит автоматическая передача формы на сервер.
 

### Checkbox

Поле **Checkbox** это переключатель, который отображается в виде поля, где можно поставить галочку и
имеет два состояния - включено и выключено. Значением такого элемента является True или False.

    Checkbox(u'Я хочу получать новости', value=True)

<table>
<tr class="checkbox-field-row">
<th><label for="id_4">&#1071; &#1093;&#1086;&#1095;&#1091; &#1087;&#1086;&#1083;&#1091;&#1095;&#1072;&#1090;&#1100; &#1085;&#1086;&#1074;&#1086;&#1089;&#1090;&#1080;<span class="colon">:</span></label></th>
<td><input checked type="checkbox" id="id_4" value="yes" name="period"></td></tr>
</table>




###CheckboxGroup

Для отображения группы переключателей используется **CheckboxGroup**. Это поле эквивалентно MultiSelect,
отличие есть лишь в отображении на странице.

    CheckboxGroup(u'Категории новостей', options=[ (1, u'Еженедельные выпуски'), (2, u'Ежемесячные выпуски'), (3, u'Срочные сообщения') ], value=[ 2, 3 ])

<table>
<tr class="checkboxgroup-field-row">
<th><label for="id_5">&#1050;&#1072;&#1090;&#1077;&#1075;&#1086;&#1088;&#1080;&#1080; &#1085;&#1086;&#1074;&#1086;&#1089;&#1090;&#1077;&#1081;<span class="colon">:</span></label></th>
<td><div class="checkboxes" id="id_5" size="3"><div class="checkboxgroup-item"><input type="checkbox" name="period" value="1"><span class="value">&#1045;&#1078;&#1077;&#1085;&#1077;&#1076;&#1077;&#1083;&#1100;&#1085;&#1099;&#1077; &#1074;&#1099;&#1087;&#1091;&#1089;&#1082;&#1080;</span></div><div class="checkboxgroup-item"><input type="checkbox" checked name="period" value="2"><span class="value">&#1045;&#1078;&#1077;&#1084;&#1077;&#1089;&#1103;&#1095;&#1085;&#1099;&#1077; &#1074;&#1099;&#1087;&#1091;&#1089;&#1082;&#1080;</span></div><div class="checkboxgroup-item"><input type="checkbox" checked name="period" value="3"><span class="value">&#1057;&#1088;&#1086;&#1095;&#1085;&#1099;&#1077; &#1089;&#1086;&#1086;&#1073;&#1097;&#1077;&#1085;&#1080;&#1103;</span></div></div><input type="hidden" name=".period" value=""></td></tr>
</table>




###RadioGroup

Если в форме нужно предоставить переключатель для выбора одного значения из множества возможных, используется **RadioGroup**

    RadioGroup(u'Пол', options=[ u'Мужской', u'Женский' ])

<table>
<tr class="radiogroup-field-row">
<th><label for="id_0">&#1055;&#1086;&#1083;<span class="colon">:</span></label></th>
<td><div class="radiobuttons" id="id_0" size="1"><div class="radiobutton"><input type="radio" name="period" value="&#1052;&#1091;&#1078;&#1089;&#1082;&#1086;&#1081;"><span class="value">&#1052;&#1091;&#1078;&#1089;&#1082;&#1086;&#1081;</span></div><div class="radiobutton"><input type="radio" name="period" value="&#1046;&#1077;&#1085;&#1089;&#1082;&#1080;&#1081;"><span class="value">&#1046;&#1077;&#1085;&#1089;&#1082;&#1080;&#1081;</span></div></div><input type="hidden" name=".period" value=""></td></tr>
</table>




###Кнопки

Кроме полей в форме могут быть кнопки. Кнопка **Submit** предназначена для отсылки формы на сервер.
Кнопка **Reset** - для очистки всех полей.

    >>> @webpage('/')
    ... def index():
    ... 	f = Form()
    ... 	f.name = Text()
    ... 	f.sbm = Submit(u'Отправить')
    ... 	f.rst = Reset(u'Сброс') 
    ... 	print f.html

<table>
<tr class="text-field-row">
<th><label for="id_0">Name<span class="colon">:</span></label></th>
<td><input class="text-field" type="text" id="id_0" value="" name="name"></td></tr>
<tr><td>&nbsp;</td><td><div class="buttons"><input type="submit" name="sbm" value="&#1054;&#1090;&#1087;&#1088;&#1072;&#1074;&#1080;&#1090;&#1100;" class="submit-field"><input type="reset" name="rst" value="&#1057;&#1073;&#1088;&#1086;&#1089;" class="reset-field">
</div></td></tr>
</table>


<a name="checkdata"></a>
Обработка данных формы и генерация сообщений об ошибках
------------------------------------------------------
При первоначальном отображении формы на странице для каждого поля можно указать начальное значение, задав его в аттрибуте
`value`. 
Когда пользователь
отправляет заполненную форму, Функция, которая сгенерировала форму для отображения на странице вызывается еще раз.
Чтобы отличить один вызов от другого нужно проанализировать значение атрибута
`is_submitted`. Если форма была передана от пользователя, тогда атрибут формы `is_submitted` приобретает
значение `True`, а поля формы содержат значения, которые ввел пользователь.
Теперь аттрибут value всех полей содержит значения, которые ввел пользователь.
Кроме того у формы есть аттрибут `data`, который является словарем. Этот словарь отображает названия полей и их значения (в том числе и для hidden полей)

Как мы рассмотрели ранее, при создании полей формы можно указывать условия, которым должно соответствовать значение
поля. Если все значения, которые ввел пользователь соответствуют заданным условиям, тогда атрибут формы
`is_valid` приобретает значение `True`. Атрибуты `is_submitted` и `is_valid` есть у формы в целом, а также у
каждого поля формы в отдельности.

Если поле не является валидным, то Пони присваивает полю текст ошибки в аттрибуте `error_text`.
Можно перекрыть стандартное сообщение об ошибке и задать другое сообщение, присвоив его аттрибуту
`error_text`. Аттрибут `error_text` есть у каждого поля в отдельности и у формы в целом.

Если мы попытаемся повторно отобразить пользователю форму, например с указанием допущенных ошибок,
то она сохранит в себе значение тех полей, что указал пользователь. При желании можно подправить
данные, которые указал пользователь присвоив аттрибуту value новое значение.
Если мы не хотим заново отображать введенные пользователем данные, можно очистить форму с помощью метода
`clear`. При этом для полей будут установлены их первоначальные значения.


<a name="generatehtml"></a>
Генерация HTML
--------------
У формы есть свойство (property) html, при каждом обращении к этому свойству генерируется
HTML представление формы в виде строки unicode.

    f = Form()
    html_code = f.html

 Такого же результата можно с помощью вызова функции unicode:

    f = Form()
    html_code = unicode(f) 



<a name="style"></a>
Стилизация формы
----------------
При генерации HTML кода формы Пони автоматически добавляет CSS классы для этих полей.
Это позволяет изменять визуальное представление полей с помощью стилей CSS.

Для форм Пони определяет следующие классы:
pony - сопоставляется форме целиком
error - для поля, которое отображает сообщение об ошибке
has-error - для поля, которое содержит ошибку
buttons - для элемента div, который содержит кнопки
required - для значка, который показывает, что поле обязательно для заполнения
colon - для двоеточия, которое отображается после названия поля
radiobutton - для поля radiobutton
radiobuttons - для группаы полей radiobutton
checkbox - для поля checkbox
checkboxgroup-item 
checkboxes - группа полей checkbox

hidden-field
text-field
textarea-field
select-field
checkbox-field
radiobutton-field

Форма в Пони представляется с помощью HTML таблицы. Каждый ряд таблицы состоит из названия поля и самого поля.
Для каждого типа поля Пони предусматривает CSS класс. Таким образом существуют следующие классы:
text-field-row, textarea-field, select-field-row, checkbox-field-row, radiobutton-field-row, statictext-field-row 



<a name="changehtml"></a>
Изменение HTML представления формы
----------------------------------
Стандартно форма выводится в виде таблицы полей, а после полей выводятся кнопки.
Иногда возникает необходимость перераспределить поля на странице или, например, продублировать кнопки формы сверху.
В этом случае можно воспользоваться возможностью выводить форму по частям. Следующие атрибуы формы представляют части формы:

`header` - содержит открывающий тэг формы и скрытые поля.
`table` - содержит HTML код всех полей формы, представленных в виде HTML таблицы
`buttons` - содержит код всех кнопок формы.
`footer` - содержит код закрывающего тэга формы.

Атрибут формы table содержит все поля. Если нужно вывести поля по отдельности, это можно сделать с помощью обращения к
атрибуту tag каждого поля.

    @webpage
    def test_form():
        f = Form()
        f.first_name = Text()
        f.sbm = Submit()
        print f.header
        print f.first_name.label
        print "<br>"
        print f.first_name.tag
        print f.buttons
        print f.footer

В этом примере название поля first_name будет отображено над самим полем, а не слева.


<a name="safeforms"></a>                          
Безопасные формы
----------------
### Тикеты
Пони позволяет использовать формы, которые защищены от Cross-Site Request Forgery(CSRF) атак.
Суть этой атаки в следующем.
Например пользователь в одном из окон браузера открыл страницу со своим банковским аккаунтом.
Злоумышленник передает пользователю ссылку, которая является запросом к сайту с банковским аккаунтом.
Например перевод денег с одного счета на другой. Эта ссылка может находиться на сайте, который контролируется
злоумышленником или в теле письма, которое злоумышленник пересылает пользователю.
Теперь, если пользователь перейдет по этой ссылке, запрос будет отправлен на сайт с банковским аккаунтом.
Этот сайт выполнит команду, потому что пользователь перед этим залогинился и для сайта эта ссылка будет выглядеть как
очередная команда от пользователя. Хотя на самом деле это может быть вовсе не то, что хотел пользователь.
Чтобы защититься от такого рода атак Пони использует тикеты.
При генерации формы в нее встраивается скрытое поле, которое содержит уникальный тикет. 
Форма будет принята от пользователя только если она содержит тикет, который совпадает с тем, который был сгенерирован при отображении формы.
Каждый тикет может быть использован только одни раз.
Таким образом, сгенерированная кем-то другим ссылка не сработает, из-за несоответствия тикета.

Тикеты могут быть использованы только с POST формами. Если форма использует тикеты она называется secure-формой.
По умолчанию все POST формы создаются как secure. Это можно отключить, указав при создании формы secure=False

### Эскапирование
__ссылка на HtmlGeneration.txt вместо этого описания__
Эскапирование позволяет защититься от Cross-Site Scripting (XSS) атак.
Суть этой атаки в следующем.
Допустим есть веб-сайт, на котором есть форум. 
Злоумышленник под видом сообщения передает на сайт javascript код.
Теперь у любого пользователя, который откроет страницу, содержащую это сообщение выполнится переданный злоумышленником javascript код. 
Чтобы защититься от такого рода атак, все данные, которые получены сервером от пользователя должны пройти процесс эскапирования -
преобразования символов &amp;,&lt;,&quot;,&gt;,&#39; в их эквиваленты для безопасного представления на странице.
Теперь, если злоумышленник передаст javascript код в виде сообщения на форум, пользователи увидят этот код в виде текста.

### Повторная отсылка формы и редирект
Браузеры позволяют пользователю обновить страницу. Большинство браузеров используют для этого клавишу F5.
Обновление страницы это ни что иное, как повторная отсылка последнего запроса на сервер.
Иногда обновление страницы может привести к проблемам.
Например, пользователь заполнил форму для перевода денег со своего банковского счета и отправил ее на сервер(не знаю почему,
но примеры с банковским счетом самые понятные). Теперь, если он нажмет F5 для обновления страницы, эта команда будет
отослана на сервер снова, хотя это может быть совсем не то, что хотел пользователь.
Многие современные браузеры позволяют предупредить такого рода действия. Например, если попытаться обновить страницу в
браузере Chrome, у пользователя будет запрошено подтверждение этого действия:

__картинка__

Теперь, если пользователь подтвердит это действие произойдет повторная отправка данных формы.
Если используется secure форма, то повторная отсылка не сработает, потому что тикет может быть использован только один раз.
Чтобы избежать вышеописанной проблемы для любой формы, нужно использовать редирект. После того, как данные формы получены и
обработаны сервером, нужно выполнить редирект на другую страницу. Например, на страницу, где отображается информация
о проведенной операции: "Ваш запрос был успешно выполнен". Для этой цели в Пони используется exception:

    raise http.Redirect("/another_url")

Этот код нужно разместить после того, как мы убедились, что данные, переданные пользователем корректны, и
произвели необходимые операции.

Ниже приведен пример полностью работоспособной программы, демонстрирующий редирект для формы:

    # -*- coding: cp1251 -*-
    from pony.main import *

    use_autoreload()

    @webpage('/')
    def page1():
        f = Form()
        f.msg = StaticText(u'Перевод денег между счетами')
        f.from_account = Text(u'с')
        f.to_account = Text(u'на')
        f.amount = Text(u'Сумма')
        f.sbm = Submit()
        if f.is_valid:
            raise http.Redirect('/success')
        else:
            print f

    @webpage('/success')
    def page2():
        print u"<h4>Операция выполнена успешно</h4>"


    http.start()



Несколько форм на одной странице
--------------------------------
Если страница содержит несколько форм, для того, чтобы определить данные какой формы были переданы на сервер,
используется атрибут формы name.
Рассмотрим пример:

    @webpage('/')
    def page1():
        f1 = Form(name='form1')
        f1.msg = StaticText(u'Служебный роман')
        f1.rating = Text(u'Рейтинг', type=int)
        f1.sbm = Submit(u'Проголосовать')
        f2 = Form(name='from2')
        f2.msg = StaticText(u'Криминальное чтиво')
        f2.rating = Text(u'Рейтинг',type=int)
        f2.sbm = Submit(u'Проголосовать')

        for f in [f1, f2]:
            if f.is_valid:
                raise http.Redirect(url(success, f.msg.value, f.rating.value))
            else:
                print f

    @webpage
    def success(movie, rating):
        print u"<h4>Фильм:%s  Рейтинг:%s</h4>" % (movie, rating)

Если в этом примере убрать атрибут name из объявления формы, этот пример будет работать некорректно.
Таким образом, если одна страница содержит более одной формы, каждая форма должна иметь уникальное имя.

    

Многостраничные формы
---------------------
Иногда заполнение формы нужно производить в несколько этапов, потому что поля, которые нужно заполнить на следующем шаге
определяются на основе данных, указанных пользователем на предыдущем шаге. Например, если пользователь указывает
место жительства, то для разных стран это могут быть разные поля.
Пони позволяет динамически анализировать значение полей и добавлять в форму необходимые поля для следующего шага.
Для полей, которые определяют дальнейший набор полей для заполнения удобно использовать поле AutoSelect.

__пример__


<a name="inheritance"></a>
Наследование форм(Процесс обработки форм)
-----------------------------------------
описать проблему с логином
Если мы хотим, чтобы форма обработалась до


__ переделанный пример из раздела Несколько форм на одной странице__

У формы, созданной методом наследования есть ряд особенностей:
    * Методы validate и on_submit
    * Предварительное вычисление полей формы
    * Автоматический редирект

on_submit вызывается до того как начинает обрабатываться сама функция.
почему? это позволяет обработать информаци., котору. мы получили от пользователя и применить эти данные для всей
генерируемой страницы. иначе, если мы обработаем ее в середине, будет часть формы, которая сгенерирована по старой инф
а часть по новой. пример с login ом


00:41

