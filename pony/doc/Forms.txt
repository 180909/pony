Формы
=====

Для демонстрации работы форм в Пони наберем следующий код в интерактивном режиме:

    >>> @webpage('/')
    ... def example():
    ... 	f = Form()
    ... 	f.first_name = Text(required = True)
    ... 	f.last_name = Text()
    ... 	f.email = Text(type = 'email')
    ... 	if f.is_valid:
    ... 		print u"<h1>Привет ", f.first_name.value, f.last_name.value, "!</h1>"
    ... 	else:
    ... 		print f
    ... 
    >>> http.start()
    Starting HTTP server at localhost:8080

Затем откроем в браузере страницу по адресу http://localhost:8080. В окне браузера мы увидим форму:

![form1](/pony/static/img/doc/form0.png)

Пони построила форму согласно написанному нами коду.
Поля формы выровнены по ширине, кроме того Пони отобразила названия полей
(`First Name`, `Last Name`, `Email`) автоматически, согласно имени полей в коде и кнопку для
отправления формы (`Отправить`).
Поле `Last Name` обязательно для заполнения и это отображается общепринятым способом - с помощью
символа <font color="red">`*`</font>.
В нашем примере мы хотим, чтобы названия первых двух полей отображались на русском языке и
это очень просто сделать - нужно задать названия полей при его создании. Наберем исправленный
код в интерактивном режиме:

    >>> @webpage('/')
    ... def example():
    ... 	f = Form()
    ... 	f.first_name = Text(u"Имя", required = True)
    ... 	f.last_name = Text(u"Фамилия")
    ... 	f.email = Text(type = 'email')
    ... 	if f.is_valid:
    ... 		print u"<h1>Привет ", f.first_name.value, f.last_name.value, "!</h1>"
    ... 	else:
    ... 		print f

Когда в Пони нам нужно ввести символы, отличные от английского алфавита, мы используем
строки `unicode`, поэтому перед строчкой текста на русском ставится символ `u`.
Откроем теперь нашу страницу:

![form1](/pony/static/img/doc/form1.png)

Наш новый вариант страницы заместил старый.
Давайте теперь заполним форму: введем фамилию и что-нибудь в поле Email.
Посмотрим что произойдет, если мы нажмем кнопку "Отправить":

![form2](/pony/static/img/doc/form2.png)

Мы видим, что при заполнении формы возникли ошибки. Верхнее сообщение - это сообщение для формы целиком,
более детальное описание допущенных ошибок отображается рядом с полями формы.

Давайте теперь подойдем к делу более ответственно и заполним необходимые поля:

![form3](/pony/static/img/doc/form3.png)

Мы исправляем допущенные ошибки и вводим необходимую информацию, а затем отправляем форму снова.
Теперь ошибок нет и мы видим приветствие:

![form4](/pony/static/img/doc/form4.png)

Давайте разберемся что происходит в этом примере.

Генерация HTML
--------------
Пони позволяет достаточно просто создавать формы используя класс `Form`, а затем автоматически генерировать
HTML код, который отображается на HTML странице. 

В нашем примере мы импортируем необходимые компоненты из pony.main, затем создаем экземпляр формы (`f = Form()`)
и добавляем в форму поля `first_name`, `last_name` и `email`. Если в конструкторе поля не укзывать название
поля, то Пони автоматически генерирует название поля в форме из имени поля в коде. В нашем примере название
поля формы Email сгенерировано таким образом. Названия полей `Имя` и `Фамилия` мы задаем в конструкторе:
`u"Имя"`, `u"Фамилия"`. Буква `u` здесь показывает, что текст представляется в кодировке Unicode, это
самый удобный способ работать с любыми не латинскими алфавитами.   

Далее в коде идет проверка - если форма заполнена и при ее
заполнении не обнаружено ошибок (`if f.is_valid`), то выводится приветствие, а иначе выводится HTML код формы.
В примере видно, что при генерации HTML Пони автоматически добавляет символ `*` рядом с полем `Фамилия`, который
показывает пользователю, что это поле обязательно для заполнения. 

Проверка данных формы и вывод результата
----------------------------------------
Пользователь вводит в браузере адрес http://localhost:8080 и в ответ функция `example()`
генерирует страницу с формой. Пользователь заполняет форму, затем данные отсылаются на сервер при нажатии на
на кнопку "Отправить". На сервере производится проверка данных.
Если форма не прошла проверку на сервере, необходимо сообщить пользователю о допущенных ошибках, чтобы
он мог их исправить. В нашем примере при создании полей мы задаем условия: поле `Имя` должно быть
обязательно заполнено, а в поле `Email` должен быть введен правильный e-mail адрес.
Если эти условия не выполняются, то форма
не принимается и пользователю выводится форма с указанием на ошибки до тех пор, пока введенная информация не
будет удовлетворять заданным условиям.

Если полученные данные прошли проверку, атрибут `is_valid` принимает значение `True` и теперь можно
обработать принятые значения, которые содержатся в атрибуте `value`.

Процесс обработки формы
-----------------------
При работе с формой, функция, которая конструирует форму вызывается более одного раза.
Когда пользователь открывает страницу, которая содержит форму, функция `example()` в нашей программе 
конструирует форму и присваивает указанные в программе значения полям (или значения по умолчанию).
Когда форма передается на сервер посредством нажатия кнопки "Отправить" на форме, та же самая функция `example()`
конструирует форму и устанавливает введенные пользователем значения элементов.
Кроме того, у формы и у элементов формы устанавливаются значения для атрибутов `is_submitted` и `is_valid`.
Атрибут `is_submitted` приобретает значение True, если значения элементов отражают введенные пользователем 
данные (форма передана от пользователя) и False, если элементы были сконструированы, используя указанные в программе
значения (форма сгенерирована для отображения пользователю).
Атрибут `is_valid` приобретает значение True, если форма была принята от пользователя и введенные значения удовлетворяют
условиям и False, если форма не была принята от пользователя, либо если значения полей не удовлетворяют
поставленным условиям.

Теперь после краткого введения мы можем сосредоточиться на каждом аспекте более детально.

[Поля формы](#formfields)
[Работаем с данными формы]()
[Проверка данных формы и генерация сообщений об ошибках]()
[Стилизация формы]()
[Изменение HTML представления формы]()
[Безопасные формы]()
[Многостраничные формы]()
[Несколько форм на одной странице]()
[Наследование форм(Процесс обработки форм)]()

Поля формы
----------
Форма может содержать различные элементы для ввода информации.  

Поле **Text** представляет собой однострочное поле для ввода текста. Возможные параметры этого поля:
value - задает начальное значение поле, которое будет отражено в форме  
required - указывает, что поле обязательно для заполнения. Визуально это отображается как символ _*_ рядом с полем,
а при передаче формы на сервер проверяется, что в поле заполнено  
label - с помощью этого параметра можно задать текст, который отображается рядом с полем  
type - задает тип поля. При сабмите формы Пони конвертирует введенное пользователем значение к указанному типу.
Если конвертация не удается, у поля устанавливается соответствующее сообщение об ошибке  
regex - этот атрибут позволяет задать регулярное выражение, которому должно соответствоать введенное значение  

Все поля формы могут принимать в качестве параметра HTML атрибуты, специфичные для этого поля. Например параметр `size`
указывает ширину текстового поля  
Более подробную информацию про стандартные HTML атрибуты можно найти [здесь](http://www.w3.org/TR/html401/interact/forms.html#h-17.4)

Поле **Password** во всем аналогично полю **Text**, разница лишь в том, что все вводимые символы представляются в виде _*_, чтобы
скрыть вводимый текст

Поле **Hidden** не отображается на форме визуально и используется когда нужно сохранить в форме информацию о состоянии. Этот
способ передачи данных в форме может быть альтернативой использованию HTTP сессии и HTTP Cookies

Поле **File** дает возможность пользователю передать файл через форму

Поле **TextArea** похоже на поле **Text**, только визуально представляется как несколько строчек текста
    
Поле **DatePicker** служит для ввода даты и по сути текстовое поле, но когда поле получает фокус, открывается javascript
виджет - календарь, который позволяет удобно выбрать дату  

Поле **StaticText** просто отображет текст, это не поле для ввода  

Поля **Select** и **MultiSelect** позволяют пользователю выбрать значение из списка. С помощью **MultiSelect** можно выбрать
более одного значения  

Поле **Checkbox** это переключатель, который отображается в виде поля, где можно поставить галочку и
имеет два состояния - включено и выключено. Для отображения группы переключателей используется **CheckboxGroup**

Если в форме нужно предоставить переключатель для выбора одного значения из множества возможных, используется **RadioGroup**

Кроме полей в форме могут быть кнопки. Кнопка **Submit** предназначена для отсылки формы на сервер.
Кнопка **Reset** - для очистки всех полей. 

Элементы формы **Composite** и **Grid** предназначены для визуальной группировки полей и кнопок, которые описаны выше  

                          
Работаем с данными формы
------------------------
Перед тем как вывести форму пользователю, мы можем установить какие то начальные значения для полей:

                              
attrs
error
error_text
form
hidden
html
html_value
initial_value
is_submitted
is_valid
label
name
regex
required
tag
type
value

Проверка данных формы и генерация сообщений об ошибках
------------------------------------------------------
Функция, которая сгенерировала форму для отображения на странице вызывается еще раз, когда пользователь
отправляет заполненную форму. Чтобы отличить один вызов от другого нужно проанализировать значение атрибута
`is_submitted`. Если форма была передана от пользователя, тогда атрибут формы `is_submitted` приобретает
значение `True`, а поля формы содержат значения, которые ввел пользователь.
Как мы рассмотрели ранее, при создании полей формы можно указывать условия, которым должно соответствовать значение
поля. Если значения, которые ввел пользователь соответствуют заданным условиям, тогда атрибут формы
`is_valid` приобретает значение `True`. Атрибуты `is_submitted` и `is_valid` есть у формы в целом, а также у
каждого поля формы в отдельности.

Стилизация формы
----------------

Изменение HTML представления формы
----------------------------------
Иногда возникает необходимость вывести форму не целиком в одном месте, а как то распределить поля на странице.
(пример с фильтрацией полей в таблице?). У объекта формы в Пони есть атрибуты, которые представляют собой
HTML фрагменты формы:
    header выводит открывающий тэг для формы и скрытые (hidden) поля формы
    footer выводит закрывающий тэг для формы
    Чтобы вывести поля формы по отдельности нужно использовать атрибут поля **tag**. Например

    print f.first_name.tag
                          
    table выводит все поля формы в виде тела таблицы, открывающий и закрывающий тэги таблицы сюда не включены    
    hidden_fields позволяет вывести только скрытые поля
    buttons кнопки, которые есть в форме

                          
Безопасные формы
----------------
эскапирование и тикеты
особенность POST
повторная отсылка формы и Редирект raise(http.Redirect("/another_url")))

Многостраничные формы
Несколько форм на одной странице
Наследование форм(Процесс обработки форм)


