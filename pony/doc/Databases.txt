Работа с базой данных
=====================


Основным способом работы с базой данный в Пони является использование
объектно-реляционного маппера. В этом случае не
возникает необходимости писать SQL запросы - разработчик оперирует объектами,
а SQL генерируется маппером. Более подробно ОРМ рассматривается в [соответствующей
главе](ссылка)

На практике могут возникать ситуации, когда удобно использовать SQL запросы,
написанные вручную. Для таких ситуаций предназначен модуль pony.db, который
является надстройкой над интерфейсами подключения к различным базам данных.
Конечно разработчик может использовать непосредственно сами интерфейсы баз данных,
не прибегая к использованию pony.db, но это менее удобно.

Удобства применения модуля pony.db:
1. Автоматическое управление транзакциями. Для обработки каждого HTTP запроса
автоматически создается транзакция. Транзакция завершается в тот момент, когда
завершается обработка HTTP запрос. Если во время обработки запроса возник
exception, производится автоматический откат транзакции.
2. Пул подключений. Пользователю не нужно следить за созданием и завершением
подключений к БД. pony.db автоматически предоставляет подключение, когда
разработчик обращается к базе данных и возвращает в пул после его использования.
3. Общие эксепшены для всех БД. Каждый интерфейс к БД определяет свои эксепшены.
pony.db позволяет использовать одни и те же эксепшены с любой БД.
4. Унифицированный способ передачи параметров в SQL запросы. Разные интерфейсы к
разным базам данных используют разнообразные способы передачи параметров в запрос.
pony.db позволяет использовать единый стиль с любой БД.
5. Более удобная работа с результатами запроса(например возможность проходить
итератором по результату запроса несколько раз).
6. Позволяет помещать запросы внутри функции, отдекорированной с помощью @printhtml.

Таким образом модуль pony.db берет на себя рутинные задачи и добавляет однородность
при использовании разработчиком разных БД. Давайте теперь подробно рассмотрим
предоставляемые возможности.


Работа с базой данных с помощью модуля pony.db
----------------------------------------------

class Database
--------------

Разработчик определяет к какой БД будет произведено подключение во время
создания экземпляра класса Database:

    db = Database("sqlite", "test.sqlite")
    
Первым параметром указывается провайдер - это название используемой БД.
Далее идут параметры, необходимые для создания подключения. В приведенном
выше примере это имя файла 'test.sqlite'. Для другой БД, например MySQL,
следует передать ip адрес БД, имя пользователя, пароль и схему БД:

    db = Database("mysql", host="192.168.1.1", user="test", passd="abc123", db="db1")

Само подключение к БД при этом не производится. Указанные параметры будут
использованы для автоматического создания подключений по мере обращения к БД.

После того как создан экземпляр класса Database, вся работа с БД ведется
через него.


select
------

Чтобы загрузить данные из БД используется метод select:

    data = db.select("* from Table1")
    
Как видно из примера, в скобках указывается SQL запрос. Ключевое слово "select"
при этом можно не писать, то что в этом случае производится select очевидно
из названия самого метода. Но если разработчик напишет "select", ничего страшного
не случится, запрос все также вернет все строки из таблицы Table1.
Когда Пони начинает выполнение запроса, она берет подключение к БД из пула подключений.
После того, как запрос выполнен, подключение возвращается обратно в пул.


Использование парметров в SQL запросах
--------------------------------------

Параметры в SQL запросе указываются с помощью символа `$` и следющего за ним имени
переменной:
    
    data = db.select("* from Users where login = $login")
    
Когда Пони обрабатывает запрос с параметрами, значения параметров берутся из текущего
фрейма (globals & locals). В приведенном выше примере Пони попытается взять значение параметра
$login из переменной login:

    login = "John"
    data = db.select("* from Users where login = $login")
    
Пони позволяет при необходимости подставить значение непосредственно в самом запросе.
Для этого нужно передать в запрос словарь со значениями параметров:

    data = db.select("* from Users where login = $login", {"login" : "Susan"})
    
Если значение параметра присутствует во фрейме и указано явно, явный параметр имеет
приоритет:

    login = "John"
    data = db.select("* from Users where login = $login", {"login" : "Susan"})
    
В этом случае будет выбрана строка для login = "Susan".

pony.db имеет ограничение на число строк, которое возвращается с помощью метода select
(задается в модуле options с помощью параметра MAX_ROWS_COUNT. По умолчанию 1000 строк).
Хотя это ограничение можно отключить, мы не рекомендуем этого делать.
Пони подразумевает, что все операции с БД выполняются для генерации HTML страниц.
Если запрос возвращает более чем 1000 строк, такая операция может сильно
нагрузить базу данных и отрицательно сказаться на производительности веб-сайта.
В этом случае Пони считает, что запрос сформулирован неверно и генерирует
exception TooManyRowsFound.


---------------

--- думаю что это не обязательно писать здесь, потому что это применимо только к sqlite ------
если мы выполним эту команду из нескольких потоков, то каждый поток сделает свое подключение.
в каждом потоке создается отдельное подключение к бд



в дбапи делается так
for row in corsor:
   ...
  
  если надо еще раз пройтись, то пишется
  снова
  for row in corsor:
   ...
   но это не сработает
   а если использовать Database, то сработает, потому что мы копируем в массив
   