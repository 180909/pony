Работа с базой данных
=====================


Основным способом работы с базой данный в Пони является использование
объектно-реляционного маппера. В этом случае не
возникает необходимости писать SQL запросы - разработчик оперирует объектами,
а SQL генерируется маппером. Более подробно ОРМ рассматривается в [соответствующей
главе](ссылка)

На практике могут возникать ситуации, когда удобно использовать SQL запросы,
написанные вручную. Для таких ситуаций предназначен модуль pony.db, который
является надстройкой над интерфейсами подключения к различным базам данных.
Конечно разработчик может использовать непосредственно сами интерфейсы баз данных,
не прибегая к использованию pony.db, но это менее удобно.

Удобства применения модуля pony.db:
1. Автоматическое управление транзакциями. Для обработки каждого HTTP запроса
автоматически создается транзакция. Транзакция завершается в тот момент, когда
завершается обработка HTTP запроса. Если во время обработки запроса возникла
исключительная ситуация(exception), Пони выполнит автоматический откат транзакции.
2. Пул подключений. Пользователю не нужно следить за созданием и завершением
подключений к БД. Пони автоматически предоставляет подключение, когда
разработчик обращается к базе данных и возвращает в пул после его использования.
3. Общие exceptions для всех БД. Каждый интерфейс к БД определяет свои exceptions.
pony.db позволяет использовать одни и те же exceptions с любой БД.
4. Унифицированный способ передачи параметров в SQL запросы. Разные интерфейсы к
разным базам данных используют разнообразные способы передачи параметров в запрос.
pony.db позволяет использовать единый стиль с любой БД.
5. Более удобная работа с результатами запроса(например, возможность проходить
итератором по результату запроса несколько раз).
6. Позволяет помещать запросы внутри функции, отдекорированной с помощью @printhtml.

Таким образом модуль pony.db берет на себя рутинные задачи и добавляет однородность
при использовании разработчиком разных БД. Давайте теперь подробно рассмотрим
предоставляемые возможности.


Работа с базой данных с помощью модуля pony.db
----------------------------------------------

class Database
--------------

Разработчик определяет к какой БД будет произведено подключение во время
создания экземпляра класса Database:

    db = Database("sqlite", "test.sqlite")
    
Первым параметром указывается провайдер - это название используемой БД.
Далее идут параметры, необходимые для создания подключения. В приведенном
выше примере это имя файла 'test.sqlite'. Для другой БД, например MySQL,
следует передать ip адрес БД, имя пользователя, пароль и схему БД:

    db = Database("mysql", host="192.168.1.1", user="test", passd="abc123", db="db1")

При создании объекта сразу производится тестовое подключение к БД. Если параметры
указаны неверно или БД недоступна, создание подключения закончится генерацией
exception. Если подключение было произведено успешно, то подключение тут же
возвращается в пул подключений и на этом создание экземпляра класса Database
заканчивается.

После того как создан экземпляр класса Database, всю работу с БД следует вести
через него.


Работа с данными
----------------
Для того, чтобы загрузить данные из БД используется методы select или get.


Метод select
------------
Метод select позволяет получить список строк из БД:

    data = db.select("* from Table1")
    
Результатом выполнения этого запроса будет список(list), который содержит все строки
из таблицы Table1. Каждая строка также представлена в виде кортежа(tuple),
состоящего из колонок.
Как видно из примера, в скобках указывается SQL запрос. Ключевое слово "select"
при этом можно не писать. То, что в этом случае производится select очевидно
из названия самого метода. Но если разработчик напишет "select", ничего страшного
не случится, запрос все также вернет все строки из таблицы Table1.
Когда Пони начинает выполнение запроса, она берет подключение к БД из пула подключений.
После того, как запрос выполнен, подключение возвращается обратно в пул.

pony.db имеет ограничение на число строк, которое возвращается с помощью метода select.
(задается в модуле options с помощью параметра MAX_ROWS_COUNT. По умолчанию 1000 строк).
Хотя это ограничение можно отключить, мы не рекомендуем этого делать.
Пони подразумевает, что все операции с БД выполняются для генерации HTML страниц.
Если запрос возвращает более чем 1000 строк, то скорее всего дизайн программы неправильный.
Результат операции select помещается в память и если число строк будет большим,
такая операция может сильно нагрузить базу данных и израсходовать всю доступную память.
В итоге это может отрицательно сказаться на производительности веб-сайта.
В этом случае Пони сигнализирует о проблеме с помощью генерации exception TooManyRowsFound.


Использование парметров в SQL запросах
--------------------------------------

Параметры в SQL запросе указываются с помощью символа `$` и следющего за ним имени
переменной:
    
    data = db.select("* from Users where login = $login")
    
Когда Пони обрабатывает запрос с параметрами, значения параметров берутся из текущего
фрейма (globals & locals). В приведенном выше примере Пони попытается взять значение параметра
$login из переменной login:

    login = "John"
    data = db.select("* from Users where login = $login")
    
Пони позволяет при необходимости подставить значение непосредственно в самом запросе.
Для этого нужно передать в запрос словарь со значениями параметров:

    data = db.select("* from Users where login = $login", {"login" : "Susan"})
    
Если значение параметра присутствует во фрейме и указано явно, явный параметр имеет
приоритет:

    login = "John"
    data = db.select("* from Users where login = $login", {"login" : "Susan"})
    
В этом случае будет выбрана строка для login = "Susan".

Метод select всегда возвращает список (list). Если не была выбрана ни одна строка,
то это будет пустой список. Если была выбрана одна или несколько строк и каждая строка
состоит из одной колонки, то это будет список выбранных значений. Если каждая строка
состоит из нескольких колонок, то результатом будет список(list) кортежей(tuple).
Поясним сказанное на примере:

    >>> from pony.main import  *
    >>> db = Database('sqlite', 'test-db')
    >>> db.execute('create table test (a int, b text)')
    >>> db.insert('test',  a = 1, b ='one')
    >>> db.insert('test',  a = 2, b ='two')
    >>> db.insert('test',  a = 3, b ='three')
    >>> print db.select("a from test")
    [1, 2, 3]
    >>> print db.select("* from test")
    [(1, u'one'), (2, u'two'), (3, u'three')]
     

Метод get
---------

Когда нам нужно выбрать несколько строк из БД, мы используем метод select.
Если нам нужно выбрать одну строку или одно значение, удобнее использовать метод get:

    first_name = db.get("first_name from Student where id = $id")
    
Если в таблице Student есть строка с указанным в запросе id, то в переменную
first_name будет загружено соответствующее значение. Это будет переменная типа str.
Метод get подразумевает, что запрос возвращает не более одной строки.
Если запрос возвращает более одной строки, генерируется exception MultipleRowsFound.

Если нам нужно выбрать несколько колонок из одной строки, то это можно сделать
следующим образом:

    name = db.get("first_name, last_name from Student where id = $id")
    
В этом случае name будет представлять из себя кортеж(tuple), состоящий из двух значений.
В некоторых ситуациях может быть удобно присвоить значения колонок разным переменным:

    first_name, last_name = db.get("first_name, last_name from Student where id = $id")
    
Использование pony.db, по сравнению со стандартным DB-API, облегчает работу и
способствует читаемости кода. Некоторые иллюстрации разницы в использовании
DB-API и pony.db приведены в [этом разделе](Ponydb vs db-api)


Метод exists
------------

Метод exists служит для того, чтобы определить, есть ли в БД строки с указанными параметрами.
Результатом будет истина или ложь в зависимости удалось ли найти хоть одну строку:
    
    if db.exists("* from Student where first_name = $name"):
        print "Student exists in the Database"
        
По аналогии с методами get и select, ключевое слово "select" в запросе можно опустить.
Пони подставит его автоматически.



Метод insert
------------

Метод insert служит для добавления данных в БД:
    
    student_id = db.insert("Student", first_name="John", last_name="Smith", group_number=4142)
    
Первым параметром указывается название таблицы. Затем идут именованные парметры и их значения.
Имя параметров должны совпадать с названиями колонок в таблице.
Результатом добавления строки в БД служит первичный ключ вновь созданной строки,
этот параметр и возвращает метод insert.



Метод execute
-------------

Метод execute служит для выполнения любого SQL запроса:

    cursor = db.execute("create table Students(first_name text, last_name text)")
    cursor = db.execute("insert into Students values($first_name, $last_name)")

Все параметры передаются внутрь запроса стандартным для Пони способом(знак $ и
следующее за ним имя параметра), вне зависимости от используемой БД.
Результатом выполнения метода execute будет курсор DB-API, с которым можно выполнять любые
операции, которые предусматривает DB-API.


Метод get_connection
--------------------
    
Метод get_connection возвращает активное подсоединение к БД.

    connection = get_connection()
    

Метод commit
------------

Метод commit служит для фиксации изменений, сделанных в БД.
????????
????? когда данные коммитятся, если мы используем pony.db не из обработчика страницы?
????????

Метод rollback
--------------
    
Метод rollback используется для отката изменений, которые делаются в базе.    



   
спискок поддерживаемых БД
-------------------------

pony.db на данный момент поддерживает следующие БД:

    sqlite
    mysql
    odbc

нужно ли нам вообще это?
???????????????????????
??use_db - если вызвать, то устанавливает БД по умолчанию
??после этого все запросы(get, select) без указания БД будут направлены к ней
???????