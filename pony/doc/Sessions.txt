
Веб сервер не поддерживает постоянного соединения с браузером клиента.
Каждый запрос, который посылается браузером, обрабатывается веб-сервером как отдельный
запрос, не имеющий никакой связи с предыдущими.
Чтобы веб-сервер мог отличить одного клиента от другого и сохранить данные между
запросами используются сессии.

Сессии позволяют сохранить переменные, которые будут доступны при последующих
обращениях клиента к веб-серверу.

Реализуются сессии с помощью кукис. Кукис - это небольшой объем(4 килобайта) текстовой
информации. Веб-сервер передает эту информацию браузеру. Теперь, если браузер
снова обращается к этому же веб-сайту, то вместе с запросом, он передает кукис,
который был ранее установлен сервером. 

Если приложению нужно хранить больше, чем 4К информации, то для этой цели можно
использовать либо файл, либо базу данных. В кукис в этом случае хранится уникальный
идентификатор пользователя. При использовании файла, этот идентификатор является
именем файла, где можно хранить сколько угодно информации.
Если используется база данных, то идентификатор является ключом в таблице.
Минусом такого подхода является дополнительная нагрузка на файловую систему или базу данных.

Пони предлагает удобный интерфейс для работы с данными сессии. Для хранения данных
используется словарь, содержимое которого затем шифруется с помощью секретного ключа и
передается в браузер клиента в виде кукис. Данные защищены с помощью шифрования и
не могут быть изменены клиентом.
При последующем обращении к веб-серверу вместе с запросом браузер передает и кукис.
Пони расшифровывает кукис и данные сессии, сохраненные во время предыдущего запроса,
становятся доступны в веб-приложении.

? Написать как бразуер работает с кукис
? что бразуер может быть настроен так, что не принимает кукис
? или хранит до того момента, пока не будет закрыт
? или сколько то дней



Сохранение и чтение данных из сессии
--------------------------

Пример:

    >>> from pony.main import *
    >>> http.session.foo = 5
    >>> print http.session.foo
    5
    
В этом примере мы импортируем необходимые компоненты Пони и
присваиваем переменной сессии `foo` значение `5`. С этого момента,
значение переменной `foo` будет доступно во время обработки последующих запросов
от этого клиента.

Если мы попробуем обратиться к переменной, которая отсутствует в сессии,
то возвращаемое значение будет `None`:

    >>> print http.session.bar
    None

При этом с данными сессии не произойдет никаких изменений.


Удаление данных из сессии
-------------------------

Если нам нужно удалить переменную из сессии, нужно присвоить ей значение `None`:

    >>> http.session.foo = None
    
Если переменная `foo` содержала какое то значение, оно было удалено из сессии.
Последующие обращения к этой переменной будут возвращать значение `None`



Другие действия с сессией
-------------------------

Сессия реализована в виде словаря(dict). Использование прямого обращения
к переменной по имени, как показано в начале этого раздела, лишь облегчает
работу с сессией и улучшает читаемость кода. Команда

    http.session.__dict__
    
возвращает словарь, в котором хранятся данные сессии.


Итерация по содержимому сессии
---------------------------------

Этот код отображает все содержимое сессии - имена переменных и их значения:

    for key in http.session:
        print key, http.session[key]

Так как для хранилища данных сессии используется словарь, следующий код
выполняет те же действия - отображает имена переменных в сессии и их значения:

    for key, value in http.session.__dict__.iteritems():
        print key, value


Использование значений по умолчанию
---------------------------------

Механизм использования значений по умолчанию для данных сессии работает
также, как и для словаря. Если для переменной указано значение по умолчанию,
то оно используется только если такой переменной нет в сессии. При этом в
сессию ничего не добавляется. Если для указанной переменной существует значение
в сессии, то значение по умолчанию игнорируется и возвращается значение
переменной из сессии. Далее приведен пример, который это демонстрирует:

    >>> print http.session.bar                  (1)
    None
    >>> print http.session("bar", "default")    (2)
    default
    >>> http.session.bar = "new value"          (3)
    >>> print http.session("bar", "default")    (4)
    new value

(1) Для переменной `bar` не установлено никакого значения в сессии.
(2) Обращение к переменной сессии `bar` с указанным значением по умолчанию ("default").
Возвращается значение по умолчанию
(3) Сохраним в сессии значение "new value" для переменной `bar`
(4) Теперь значение по умолчанию игнорируется и возвращается значение переменной из сессии


Очистка всех данных сессии
--------------------------

Метод clear() позволяет удалить все данные из сессии:

    http.session.clear()
    
