URL Роутинг
===========

Назначение веб приложения - генерировать страницы, которые пользователь открывает в браузере.
В этой главе мы рассмотрим модуль URL Роутинг с помощью которого приложение понимает  какую
страницу нужно сгенерировать в ответ на запрос.

Модуль URL Роутинг решает две задачи:
    
  *  Преобразование URL в вызов конкретной функции-обработчика
  *  Генерация URL для конкретной функции-обработчика 

Преобразование URL в вызов конкретной функции-обработчика
---------------------------------------------------------
Основное назначение роутинга - связать набранный пользователем URL с
функцией-обработчиком на сервере.
Многие фреймворки используют регулярные выражения, чтобы сопоставить функцию для URL.
Регулярные выражения безусловно очень мощный инструмент, но вместе с этим часто трудный для
понимания для большинства пользователей.
Пони предлагает мощный и гибкий, в то же время простой для использования способ для решения этой
задачи.


Весь процесс обработки URL выглядит следующим образом:
    
  1.  Пользователь набирает URL в браузере
  2.  URL запрос передается браузером на веб сервер  
  3.  Веб сервер передает запрос Пони  
  4.  Модуль URL роутинг анализирует запрос, находит соответствующий обработчик,
выделяет параметры из URL запроса и производит вызов функции-обработчика с этими параметрами

Динамический веб сайт это набор функций-обработчиков, которые вызываются в ответ
на набранные пользователем URL.
Давайте рассмотрим основные возможности Пони на нескольких простых примерах.

### Связывание URL с функцией-обработчиком ###
Давайте рассмотрим как связать URL с функцией-обработчиком. Вот пример законченной программы,
которая генерирует страницу с помощью Пони.


    from pony.main import *     (1)

    @http                       (2)
    def hello():                (3)
        return "Hello world!"   (4) 

    http.start()                (5) 

(1) В первой строчке мы импортируем все самое необходимое для Пони. После того как выполнен
import мы можем использовать компоненты Пони в нашем коде.  
(2) Здесь мы _декорируем_ функцию hello с помощью декоратора http.  
Тем самым мы даем понять Пони, что мы хотим, чтобы эта функция была обработчиком для URL и
была бы доступна для пользователей веб сайта.  
(3) Объявление функции hello.  
(4) Возвращаемым значением будет строка "Hello world!".  
(5) Запускаем веб сервер.  
Как и все примеры, мы можем запустить этот пример из интерактивного режима и
посмотреть что получилось.  

После того как мы запустили приведенный выше код в интерактивном режиме или в виде отдельного файла,
мы можем посмотреть на сгенерированую страницу в браузере. Давайте разберемся, какой URL нужно
набрать, чтобы увидеть результат.
Когда мы указываем декоратор http без параметров, Пони по умолчанию берет параметры 
из самой функции. В этом примере соответствующий этой функции URL будет '/hello'.
Командой `http.start()` мы запустили веб сервер, который по умолчанию обслуживает порт 8080.
Теперь наберем в браузере http://localhost:8080/hello и увидим наше приветствие.

    Картинка

Как вы видете из примера, связать URL с функцией-обработчиком в Пони очень просто.

### Передача параметров в функцию ###
На практике часто возникает необходимость передать параметры на сервер.
Самый простой способ сделать это в Пони - добавить необходимый параметр в функцию-обработчик:

    @http                                                     
    def hello(name):                              
        return "Hello " + name + "!"              

Здесь мы добавили в функцию параметр `name`, который тут же отображается на странице.

URL для этой страницы будет немного отличаться от предыдущего.
У функции hello теперь есть обязательный параметр и раз этот параметр обязательный,
он должен присутствовать в URL.
Пони ожидает, что параметр будет указан в URL стандартным способом:

    http://localhost:8080/hello?name=Pony

Если мы наберем этот URL в браузере, то увидим страницу, сгенерированную Пони:

    Картинка    

### Значения по умолчанию ###
Что если мы хотим, чтобы параметры в функции имели значения по умолчанию?
Как и в предыдущем примере, изменения каснутся только объявления самой функции:

    @http                                           
    def hello(name='world'):                 
        return "Hello %s!" % name   
                                  
Теперь, если мы не будем указывать ни одного параметра в URL, мы увидим, что Пони подставит
значение по умолчанию:

    Картинка

Мы также можем указать значение параметра в URL:    

    Картинка для http://localhost:8080/hello?name=Pony

Если внимательно присмотреться к последнему примеру, можно заметить, что здесь мы выводим
результат другим способом:

    return "Hello %s!" % name    

Вам нужно привыкнуть к этой записи, потому что это самый удобный и
эффективный способ формирования строк в Питоне. В этом примере `%s` определяет место,
куда будет подставлен параметр `name`.

### Произвольные URL для функции-обработчика ###
До текущего момента мы не указывали никаких параметров для декоратора @http.
В таком режиме URL, по которому доступна функция строится по умолчанию.
Для нашего примера это будет

    /hello?name=some_name

Это стандартная запись для передачи параметров методом GET. Если мы хотим, чтобы URL был
более компактным и легко читаемым, нужно указать в декораторе `@http` где располагается переменная часть. 
    
    @http('hello/$name')                                           
    def hello(name):                 
        return "Hello %s!" % name

Здесь мы указали явно, что после символов `hello/` в URL ожидается переменная часть, которая будет
передана в функцию в качестве парамтера `name`. Теперь нашей функции соответствует такой URL:

    /hello/Pony

    Картинка

### Несколько URL для одного обработчика ###
Следующий простой пример демонстрирует рассмотренные ранее возможности, а также возможность сопоставлять
несколько URL одной функции-обработчику:

    @http('hi')
    @http('hello/$name')                                           
    def hello(name='world'):                 
        return "Hello %s!" % name

При обработки первого указанного URL мы можем использовать либо имя заданное по умолчанию, либо станартную
передачу параметра в функцию:

    картинка для hi

    картинка для hi?name=Pony

Второй URL связанный с этой функцией повторяет уже рассмотренный ранее пример:

    картинка для hello

    картинка для hello/Pony
    

Генерация URL для функции-обработчика
------------------------------------------------
Ранее мы познакомились с тем, как отображать URL на функцию-обработчик.
Часто при построении динамического веб сайта возникает обратная задача - отобразить
URL, который соответствует определенной функции-обработчику. Например, чтобы добавить сслыку
на раздел нашего сайта в главное меню. Конечно, зная какой URL соответствует фунции на данный момент,
можно просто вписать ее в HTML код. Но в этом случае каждое изменение URL потребует обновления
ранее указанной ссылки вручную.
Для генерации URL в Пони используется функция url, которой передается
функция-обработчик и ее параметры.

url(func, arguments)

Для примера попробуем отобразить URL для функции hello из последнего примера. Наберем в интерактивном режиме:

    >>> @http('hi')
    ... @http('hello/$name')                                           
    ... def hello(name='world'):                 
    ...    return "Hello %s!" % name
    ...
    >>> url(hello)
    '/hi'
    >>> url(hello, 'Pony')
    'hello/Pony'

Наличие удобного и гибкого роутинга позволяет менять структуру адресов веб сайта
не изменяя при этом сами функции, которые генерируют страницы. 

Более подробно о Роутинге 
=========================
Рассмотренных ранее возожностей вполне достаточно, чтобы построить веб сайт с помощью Пони.
В этом разделе мы рассмотрим возможности Пони, которые дают неограниченную свободу разработчику
оставаясь при этом максимально простыми для освоения, как и все компоненты Пони.

### Любые URL для функции-обработчика ###
Перед вами может стоять задача, когда URL должен соответствовать какой то
структуре, а параметры нужно передавать не поименно, а брать из самого URL.
Например для архива нашего сайта мы хотим, чтобы все статьи за Ноябрь 2008 года были бы доступны
по таком адресу:

    /archive/2008/11/posts

Решить такого рода задачу с помощью Пони очень просто. Для этого нам нужно указать Пони,
какая часть URL будет являться параметром:

    @http('/archive/$year/$month/posts')
    def archive(year, month):
        ...    

Каждый идентификатор, который начинается со знака '$' представляет собой динамическую часть URL.
Когда Пони сопоставляет URL с конкретной функцией-обработчиком, она выделяет динамические части из URL и
передает в функцию как параметры.

Разделителем между параметрами может быть не только символ '/'. Такие варианты тоже возможны:

    >>> @http('/archive/$year-$month/posts')
    ... def archive2(year=None, month=None):
    ... 	pass
    ... 
    >>> @http('/archive/$year.$month/posts')
    ... def archive3(year=None, month=None):
    ... 	pass
    ... 
    >>> url(archive2, 2008, 11)
    '/archive/2008-11/posts'
    >>> url(archive3, 2008, 11)
    '/archive/2008.11/posts'
    >>>     


### Несколько URL для одного обработчика ###
Ничто не остается постоянным и в какой то момент вам может понадобиться изменить структуру адресов веб сайта.
Используя возможности Пони это можно сделать довольно быстро, но нам нужно помнить, что некоторые пользователи
могли сделать закладки используя старые адреса. Если просто поменять URL страниц,
закладки, сделанные с использованием старых адресов, перестанут работать. 
Пользователи, которые приходят
на ваш веб сайт через поисковую машину тоже будут испытывать неудобства - пройдет какое то время
пока она перестроит индекс и заменит старые URL на новые

Используя роутинг в Пони можно очень легко изменять структуру веб сайта,
не нарушая при этом работы тех пользователей, которые привыкли работать со старой структурой.
Любой фунции-обработчику можно присвоить сколько угодно URL адресов:

    >>> @http('/old-structure/archive/$year-$month/posts')
    ... @http('/new-structure/posts-archive/$year/$month/posts')    
    ... def archive2(year=None, month=None):
    ... 	pass
    ...     

В этом примере пользователь получит ту же самую страницу открыв ее по двум разным URL. 

### Редирект ###
Использование нескольких URL для одной и той же страницы решает задачу введения новой структуры адресов.
Но вместе с удобством появляется неоднозначность. Пользователи не могут определить по внешнему виду какой адрес
старый, а какой новый. 
Поисковые машины присваивают бОльший рейтинг страницам с бОльшим числом линков на них. Если у одной и той же страницы
несколько адресов, то разные люди будут делать ссылки на разные адреса и это понизит эффективность веб сайта.

Хорошей практикой считается иметь один постоянный URL для страницы. Если по какой то причине нужно
сопоставить странице альтернативный URL, нужно обеспечить редирект с альтернативных адресов на
постоянный URL. Редирект - это автоматическая переадресация браузера на другой URL.
Для того, чтобы обеспечить редирект на новый адрес нужно указать `redirect=True` в декораторе со старым URL.
Для предыдущего примера это будет выглядеть так:

    >>> @http('/old-structure/archive/$year-$month/posts', redirect=True)
    ... @http('/new-structure/posts-archive/$year/$month/posts')    
    ... def archive2(year=None, month=None):
    ... 	pass
    ...      

Редирект может быть нескольких типов, самые часто используемые из которых - постоянный и временный.
По умолчанию, если указать параметр `redirect=True`, Пони делает постоянный редирект
с кодом '301 Moved Permanently'.
Если поисковая машина натыкается на постоянный редирект, то отныне она будет обращаться сразу по новому адресу.
Временный редирект обозначается кодом '307 Temporary Redirect'
Если редирект временный, то поисковая машина не должна заменять старый адрес на новый.
Чтобы сделать временный редирект, или редирект какого то другого типа, нужно указать код редиректа
в качестве параметра:

    @http('/old-structure/archive/$year-$month/posts', redirect='307')

Другие возможные значения параметра redirect приведены ниже.

### Символ '/' в конце URL ###
Случается ситуация, когда URL, который написан в декораторе отличается от того, который набран в
браузере только наличием или отсутствием знака '/' на конце.

Когда Пони анализирует URL полученный от браузера она сначала попытается найти точное соответствие.
Если точное соответствие есть - вызывается соответствующий обработчик.
Если точное совпадение не найдено, Пони попробует убрать/подставить слэш в конце URL и найти
обработчик для такого URL. Если при этом найдено соответствие, Пони автоматически выполняет редирект
по найденному адресу со статусом '301 Moved Permanently'

### Параметры декоратора http ### 
Декоратор http принимает несколько параметров:

`url`  
Задает URL, который будет обрабатываться этой функцией. Параметр может включать в себя следующие части

  *  Статические части. Требуется полное совпадение между указанной статической частью и соответствующей
  частью полученного URL
  *  Параметры. Параметр начианается с символа `$`и может состоять из символов, которые разрешены для
  использования в идентификаторах в Питоне
  * wildcard. Запись `$*` соответствует любому набору символов начиная с этого места и до конца URL 

`host`  
Когда веб сервер передает запрос приложению, в запросе указывается какому хосту и порту предназначается вызов

    URL: http://localhost:8080/hello
                 host     port

Если приложение обслуживает несколько хостов, то в этом параметре можно указать какой хост обслуживает эта функция.
По умолчанию, когда не указано никакое значение, обслуживаются все хосты.
В этом параметре можно указать сразу и хост и порт, например:

    host='localhost:8080'


`port`
Если приложение обслуживает несколько портов, например localhost:80 и localhost:8080, то можно указать
какой конкретный порт обслуживает эта функция. По умолчанию, если ничего не указывать в качестве значения,
обслуживаются все порты.

`redirect`  
Этот параметр определяет будет ли осуществляться редирект с указанного URL.
Значение по умолчанию - `False`. Значение `True` эквивалентно коду '301 Moved Permanently'
Другие возможные значения
Стандартные коды для редиректа:

    '301' : '301 Moved Permanently',
    '302' : '302 Found',
    '303' : '303 See Other',
    '305' : '305 Use Proxy',
    '307' : '307 Temporary Redirect'


Редирект будет произведен на
постоянный URL, указанный для этой же функции-обработчика (URL для которого не задан параметр `redirect`).
Хорошим тоном является наличие у страницы только одного постоянного URL.
Возможные значения 


`**headers`  
Если возникает необходимость установить какие то определенные заголовки при генерации страницы,
можно указать их в качестве поименных параметров в декораторе `@http`:
    
    @http("test", foo_bar="baz")
    def myfunction():
        return "hello"

результатом будет страница, в которой будет установлен заголовок `Foo-Bar` со значением `baz`:

    200 OK
    Content-Type: text/plain
    Foo-Bar: baz

Символ подчеркивания в этом случае заменяется на `-`

Это может быть удобно, если нам нужно указать тип генерируемого контента или кодировку:
    
    @http(type="text/foobar", charset="koi8-r")
    def test():
        return 'test'
 
Результатом будет страница, в которой установлен заголовок
Content-Type: text/foobar; charset=koi8-r

### Обработчики для конкретных HTTP методов ###

Обычная запись
@http -
При этом обрабатываются только методы
HEAD, GET, POST
Но не будет обработаны другие методы (такие как PUT, DELETE, etc)
Если наряду с общим обработчиком указан и специфический, например
@http.GET
То Пони перенаправит GET запрос обработчику @http.GET
а POST и HEAD общему.


### Несколько похожих обработчиков ###

@http("/test/$x/abcd")
def test1(x)
 
@http("/test/$a/$b")
def test2(a, b)

/test/333/abcd - first one
/test/333/abce - second one

### Переменное число аргументов ###

@http("/test/$x/$y/$*")
def myfunction(x, y, *args)
/test/ab/cd/ef/gh -> $x=ab, $y=ef, args = ("ef", "gh")
 

### Числовой тип парамера для переменной в URL ###
Тип всех переменных, которые извлекаются из URL имеет строковый тип (str).
Иногда бывает удобно указать, что в функции ожидается числовое значение.
При сопоставлении URL с функцией Пони преобразует отмеченные переменные к числовому типу.
Если преобразование невозможно, Пони считает, что эта функция не совпадает с URL.
Например:

    @http("test/$x/$y")
    def test(x=int, y):
        return "test"

Обращение к URL '/test/100/200' будет преобразована к вызову функции `test` с параметрами x=100, y='200'.
Обращение к URL '/test/abc/def' в результате приведет к отображению страницы 'Not Found'


### Страница 404 - Not Found ###
В случае, если Пони не находит ни одного соответствия URL с функцией-обработчиком, генерируется страница с HTTP
кодом 404 - Not Found.
В режиме отладки на эту страницу выводится список всех зарегистрированных URL.
Когда разработка веб сайта завершена и сайт запущен в production, следует выключить вывод отладочных сообщений.
Файл pony/options.py среди прочих параметров содержит параметр

    DEBUG = True

который определяет режим отображения отладочных сообщений.

    
@http("") и @http("/") в той видимо редкой ситуации, когда корень программа обрабатывает не весь сайт,
а его подраздел (то есть когда SCRIPT_NAME не пустой), в этом случае может быть разница, добавляется слэш в
конце адреса главной страницы или нет

