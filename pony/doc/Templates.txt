Шаблоны
=======


Шаблоны предназначены для генерации любых текстовых документов, в том числе HTML страниц.

Обычно для генерации страницы веб-приложение выполняет код для обращения к базе данных,
код логики приложения и код для генерации HTML страницы.
Если весь этот код держать вместе, в одной функции, то текст программы становится труден для чтения и изменения.
Шаблоны позволяют разделить логику веб-приложения и логику генерации HTML страниц.

Особенностью шаблонов в Пони является то, что внутри них можно использовать произвольные выражения языка Питон,
в том числе вызовы функций (как стандартных, так и определенных пользователем).



### Использование функции template


Для генерации текстовых документов используется функция template.   
Простейший пример шаблона:

    >>> from pony.main import *              (1)
    >>> def test(name):                      (2)
    ... 	return template("Hello $name!")  (3)
    ... 
    >>> print test("world")                  (4)
    Hello world!                             (5)

В этом примере происходит следующее:
(1) Импортируем все необходимые компоненты Пони.  
(2) Объявляем функцию test с параметром name.
(3) При возврате результата функции test вызывается функция template, которая обрабатывает
заданный шаблон "Hello $name!".
(4) Здесь мы вызываем функцию test с параметром "world". Результат - строка unicode "Hello world!",
которая выводится в следующей строке (5)

Пони позволяет обращаться из шаблона к любой переменной, которая доступна в функции. 
В шаблоне можно использовать любые питоновские выражения, а также функции и объекты, которые доступны из модуля,
в котором объявлен шаблон. Чтобы дать понять Пони, что это обращение к переменной или функции, нужно использовать
символ $ перед переменной, функцией или выражением. Если в тексте нужно указать сам символ $,
то нужно написать этот символ дважды: $$.
Если выражение состоит из нескольких переменных или включает в себя операции, нужно взять это
выражение в скобки, а перед скобками поставить символ $.
Рассмотрим другой пример:

    def test2():
     	a = 5
     	b = 10
     	return template("$a + $b = $(a + b)")

Результатом вызова "print test2()" будет такой:

    print test2()
    5 + 10 = 15
    
В этом примере сначала выводится значение каждой переменной по отдельности, а затем вычисляется сумма.
Из шаблона может быть вызвана любая функция, которая доступна из самого модуля.
Это может быть стандартная функция из питоновской библиотеки, или  функция, объявленная в модуле:

    def test3():
    	s = 'abcdef'
    	return template("s = $s, len(s) = $len(s)")
    
    print test3()
    s = abcdef, len(s) = 6
    
Возможность вызывать функции из шаблона позволяет удобно конструировать документы любой сложности,
создавая большой документ из более мелких частей:

    def header():
     	return template("This is the header")
    
    def body(name):
        return template("Hello $name!")

    def page():
        return template(
            """
            $header
            $body("world")
            """)
         
Результатом вызова "print page()" будет:

    This is the header
    Hello world!



### Использование функции html


Для генерации HTML страниц, вместо функции template, следует использовать функцию html.
Эта функция поддерживает описанную ранее концепцию безопасных строк. __ссылка на HtmlGeneration.txt__
Текст, который содержится внутри шаблона является безопасной строкой.
При передаче в шаблон небезопасной строки, Пони переводит все небезопасные символы в escape
последовательности для предотвращения XSS аттак. Давайте рассмотрим вышесказанное на примере:

    >>> def hello(name):
    ...  return html('<H1>Hello, $name!</H1>')
    ... 
    >>> print hello('John')
    <H1>Hello, John!</H1>

Часто для генерации страницы веб-приложение использует информацию, полученную от пользователей.
XSS атака заключается в том, то хакер может передать javascript код, под видом запрашиваемой информации, который
потом будет исполнен на компьютере любого пользователя, открывшего эту же страницу.
Использование функции html позволяет защититься от такого рода атаки. Таким образом, если хакер попытается передать
код на сервер, этот код будет отображен на странице как текст:

    >>> print hello("<script>alert('Evil script!')</script>")
    <H1>Hello, &lt;script&gt;alert(&#39;Evil script!&#39;)&lt;/script&gt;!</H1>

Если внутри программы нам самим нужно передать HTML код в качестве параметра, для этой цели нужно использовать
безопасную строку. Например, полученную с помощью той же функции html:
                                   
    >>> print hello(html('<b>not escaped</b>'))
    <H1>Hello, <b>not escaped</b>!</H1>

Таким образом, все что указывается внутри функции html считается HTML разметкой и с этим текстом не производится
никаких преобразований. Параметры, которые передаются в шаблон, автоматически проходят через преобразование
символов HTML разметки в их текстовое представление, если они еще не являются безопасными строками (экземплярами
класса Html)




### Сохранение шаблонов в html файлах

-------------------------------------------------
___написать сначала про
    def page():
        return html(filename="")

это либо абсолютный путь, либо относительный main fila
-------------------------------------------------

Ранее мы рассмотрели примеры, в которых задавали шаблон в качестве параметра функции html.
Если размер шаблона больше нескольких строк, то удобнее хранить его в отдельном файле.
В этом случае в функции, которая генерирует HTML страницу нужно сделать вызов функции html без параметров:

    def page():
        return html()

При обработке функции page() Пони попытается открыть файл, имя которого состоит из
названия питоновского файла, в котором находится функция, названии функции, из которой производится обращение
к html() и строки 'html', разделенных точками.
Рассмотрим пример.
Файл example1.py содержит приведенную выше функцию page(), из которой производится вызов html().
В этом случае Пони откроет шаблон, который находится в файле example1.page.html

-------------
если это не функция а метод класса 
то будет имя класса, имя метода, html
--------------


### Использование выражений

Пони позволяет обращаться к любому объекту, функции, переменной, которая доступена в функции, из которой производится вызов шаблона.
По сути, в шаблоне можно написать любое питоновское выражение. Чтобы дать понять Пони, что это питоновское выражение,
нужно поставить перед ним символ $:

    $имя_переменной
    $имя_функции

Выражение может включать в себя обращение к атрибуту переменной, индексу или ключу, параметрам функции:

    $имя.атрибут
    $имя[индекс или ключ]
    $имя_функции(параметры)

Во всех описанных выше случаях приведенная конструкция будет считаться питоновским выражением и будет выполнена в рамках
контекста функции, из которой произведен вызов шаблона.
Если нам нужно записать выражение, то его следует взять в скобки:

    $(x+y)

Когда скобки закрываются, Пони считает, что заканчивается и выражение. В следующих примерах питоновское выражение заканчивается
после закрывающей скобки:
    
    $(x + y).attr     
    $(x + y)[key]

В этих примерах .attr и [key] уже не относится к выражению и будет отображено в генерируемом документе как текст.
Чтобы выражение было все целиком, нжуно включить его в еще одни скобки:

    $((x + y).attr)     
    $((x + y)[key])

Теперь .attr и [key] тоже относится к выражению.

Таким образом, если в выражении используются скобки, то выражение заканчивается как только закрываются скобки:    

    $a.b.c(d, e, f).g.h

Здесь .g.h уже не является частью выражения. То же относится и к квадратным скобкам:

    $a.b.c[d, e, f].g.h

Здесь .g.h уже не является частью выражения.

В приведенном ниже примере выражением является только a.b:
 
    $(a.b).c(d, e, f).g.h

Если нам нужно принудительно завершить выражение, для этого следует использовать точку с запятой:
                                   
    $имя;[abc]

Здесь [abc] уже не часть выражения, потому что символ ; - это принудительное окончание выражения.
В этом случае сам символ ; не выводится в генерируемом документе. Если нам нужно, чтобы этот символ отобразился в том месте,
нужно написать его дважды:

    $имя;;[abc]

Здесь первый символ ; закрывает выражение, а второй отображается в документе как текст.                                   




### Операторы


Кроме переменных и функций в шаблоне можно использовать операторы.
Операторы позволяют управлять логикой постороения шаблона.
Все операторы выполняются на этапе генерации шаблона.




### Условный оператор


Условный оператор позволяет вывести ту или иную часть разметки документа на этапе генерации, в зависимости
от условия. Логика работы такая же как у условного оператора в Питоне.
Пример:
------------------------------ тогда шаблон будет выглядеть так -------------------------------------
    def status():
        return html("""$if(http.user){<h4>User logged as $http.user<h4>}
                       $else{<h4>Please log in<h4>}""")

В этом примере подразумевается, что в программе есть переменная loggedin, которая принимает значение True,
если пользователь залогинился на сайт и False в противном случае. При генерации на странице отображается
соответствующий HTML код.  

Синтаксис:
                                   
    $if(условие){ разметка1 }
    $elif(условие2){ разметка2 }
    $else{ разметка3 }



### Оператор цикла


Оператор цикла удобен при выводе повторяющихся строк, например при генерации таблицы.
В последующем примере предполагается, что в программе есть список messages, каждый элемент которого
содержит имя автора сообщения и само сообщение.

-------------- показать тут сразу шаблон -----------------------------
-------------- начать с простого примера ---------------------
<h1>Messages:</h1>
<ul>
$for(message in messages)
{
    <li>$message</li>
}
</ul>

При генерации документа выводится весь текст, который заключен между фигурными скобками, включая переводы строк.
------------------ что ты говорил про автоматическое убирание отступов? ---------------

    def render_table():
        return html("""
    <table>
    <tr><th>Name</th><th>Message</th></tr>
    $for (author, msg in messages) {
    <tr><td>$author</td><td>$msg</td></tr>
    }
    </table>"""

Синтаксис:                                   

    $for(список_переменных in последовательность) { разметка1 }
    $else{ разметка2 }

В логике работы оператора цикла есть некоторые отличия от аналогичного оператора языка Питон,
которые мы рассмотрим ниже. Эти отличия были сделаны для удобства использования шаблонов.
                    
Переменные из списка переменных будут доступны только в самом цикле, а при выходе из цикла будут удалены.
Если в программе существовали переменные с такими же именами, то они будут перекрыты на время
выполнения цикла, а при выходе из цикла им будут восстановлены предыдущие значения.
Это одно из отличий оператора цикла в Пони. В Питоне, если в цикле используется переменная с таким
же именем, после выхода из цикла ее значение не восстанавливается на значение до входа в цикл.

Этот же принцип применим и для вложенных операторов цикла в шаблонах. Если в качестве переменной
цикла используется одна и та же переменная, то при выходе из внутреннего цикла, переменной будет восстановлено
ее значение во внешнем цикле:
                    
    $for(a in sequence1) {
       <!-- здесь используется значение переменной $a из sequence1 -->
       $for(a in sequence2) {
          <!-- здесь используется значение переменной $a из sequence2 -->
       }
       <!-- здесь используется значение переменной $a из sequence1 -->
    }

Оператор цикла в шаблоне позволяет объявлять дополнительные переменные, которые могут быть доступны внутри цикла:
                    
    $for(a, b in sequence1; c = a + 1; d = a * b) {
      $a $b $c $d
    }

-------------- написать здесь, что ; не разделяет блоки, как в C++ или java -----------------
-------------- доп переменных может быть произвольное кол-во
В этом примере переменные c и d будут заново вычисляться на каждом витке цикла.


### Использование "else" в операторе цикла


Другим отличием оператора цикла от аналогичного оператора в Питоне является логика работы части "else".
В Пони содержимое else выводится в том случае, если не был выполнен ни один из витков цикла.
В Питоне else выполняется если цикл не был прерван с помощью операции break.
Пример:
                    
    $for(msg in messages) {
        <!-- вывод списка сообщений -->
        Сообщение: $msg 
    )$else{
        <!-- список сообщений пуст -->
        Сообщений нет
    }




### Использование разделителя в операторе цикла


При использовании оператора цикла часто возникает необходимость разделять генерируемый в цикле текст.
Например с помощью запятой.
Если мы просто добавим вывод запятой в теле самого шаблона, запятая будет добавлена и в самом конце,
что может быть не то, что в данном случае нужно. Допустим в программе есть список сообщений
messages = ["one", "two", "three"]                    
Шаблон вида

    $for (msg in messages) {$msg, }

сгенерирует такой текст:

    one, two, three,

Чтобы вывести разделитель только между соседними фрагментами текста нужно использовать separator:

    $for (msg in messages) {$msg} $separator{, }

Сгенерированный текст в этом случае будет выглядеть так:

    one, two, three

                    
                    
кроме последней:

     $for(msg in messages) {
       {"col1":"$(r['id'])", "col2":"$(r['timestamp'][:-7])", "col3":"$(r['text'])"}
     }
     $separator{,}     
                    

$separator

$for(a, b in expr)
{
  ...
}
$separator{ ... }
$else{ ... } - послушать запись

------------
$for(a, b in expr) {
  ...
}

$for(a, b in expr)
{
  ...
}
мы поглащаем некоторые переводы строк, надо проэкспериментировать (наверное после первой фигурной скобки)



### Обработка исключений в шаблонах

try ... except

$try{  <<< $(a/b) >>>  }
$except(Exception1){ ... }
$except(Exception2){ ... }
$else{ ... } - надо проверить есть ли else

$try{  ... }
$except(Exception1){ ... }
$except(Exception2){ ... }
$except{ ... }

более короткая запись
$( ... ){ ... }

$(a/b){извините, произошла ошибка}, выполнение шаблона при этом не прервется


### Вызов функций

если мы создали в питоне функцию
def myfunction(a, b, c):
   ...

в шаблоне $myfunction(x, y, z) сделает вызов и подставит результат

$myfunction(x, y){ ... } - передать разметку, третий аргумент

$myfunction(x){ ... }{ ... }

$myfunction{ ... }{ ... }{ ... }
получает 3 разметки

$cycle{ ... }{ ... }{ ... }

есть три дырки на странице
$mylayout{ header }{ body }{ footer }

Например:
def div(x):
    return html('<div class="myclass">$x</div>')

$div{ <h1>Hello, $name!</h1> }
результат будет
<div class="myclass"><h1>Hello, John!</h1></div>

### Оператор IF

def IF(p, q):
  if p: return q
  else: return ""

$IF(a<b){ a меньше чем b}

$IF(a<b){ $a меньше чем $b!!! }
если a = 10, b = 20, на экран будет вываедено "10 меньше чем 20"

отличие IF от if в том, что сначала выполнится разметка

$if( b != 0){ Результат $(a/b) }

обычный иф выполнит a/b только если b!=0, а IF - сначала выполнит разметку, то есть a/b

def IF(p, q):
  if p: return q.eval()
  else: return ""

IF.lazy = True  - полностью имитирует обычный if

@lazy
def IF(p, q):
  if p: return q.eval()
  else: return ""

i18n

---------------


from pony.templating import html

class Layout(object):
    def header(self, markup):
        self._header = markup
    def footer(self, markup):
        self._footer = markup
    def __str__(self):
        return html('''
            <div>
              <h1>$(self._header)</h1>
              <h2>$(self._footer)</h2>
            </div>
            ''')
    
print html("""

$Layout()
$.header{<strong>This is header</strong>}
$.footer{<em>This is footer</em>}

$Layout()
$.header{<strong>This is header</strong>}
$.footer{<em>This is footer</em>}

""")

$.header - метод предыдущего объекта, который был создан
str генерируется неявно