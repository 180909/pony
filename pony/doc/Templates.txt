Шаблоны.

Не привязаны жестко к HTML, с помощью них можно генерировать любой файл, в том числе HTML.
Синтаксис такой, что его легко внедрить в другие языки
начинаем с $, но если нам нужен $ мы ставим $$
$имя_переменной
после имени может быть
$имя.атрибут
$имя[индекс или ключ]
$имя(парметры)
во всех случаях это выполняется как питоновское выражение
когда мы пишем так они выполняются в рамках питоновского контекста
если мы сделали
def test():
    a = 1
    b = 2
    return html()

из шаблона мы можем ссылаться на a,b и глобальные функции из модуля
мы можем вызывать из шаблона
$sin(90)
это позволяет конструировать сложный текст вызывая части шаблона из
например
$header
$body
$footer

можно писать так $(x+y)
но $(x + y).attr $(x + y)[key] - работать не будет

$имя;[abc], abc - уже не часть выражения
; - принудительное окончание выражения

если мы пишем услоие, мы пишем $if(условие){разметка}
$else
$elif

$if(условие){разметка1}
$elif(условие2){разметка2}
$else{разметка3}

$for() Из записи взять

$for(a, b, c in expression) { ... }
эти переменные доступны только в самом цикле
потом будут удалены
если такие переменные существовали в программе, им будут восстановлены предыдущие значения


$for(a in expr1) {
   $a - из expr1
   $for(a in expr2) {
      $a - expr2
   }
   $a - expr1
}

в обычном питоне не так, если переменную заменили, то она остается измененной
внутри шаблонов нет никаких side-effects

можем объявлять дополнительные переменные
$for(a, b in expr; c = a + 1; d = a * b) {

  $a $b $c $d

}

a, b in expr; - для итераций
c = a + 1; d = a * b - доп переменные, которые создается на каждом витке цикла

$for(a in expr)
{
   ...
)
$else
{
   ...
}

else выполняется если не был выполнен ни один виток цикла (в питоне если все витки цикла были выполнены без break, то есть до конца)

try ... except

$try{  <<< $(a/b) >>>  }
$except(Exception1){ ... }
$except(Exception2){ ... }
$else{ ... } - надо проверить есть ли else

$try{  ... }
$except(Exception1){ ... }
$except(Exception2){ ... }
$except{ ... }

более короткая запись
$( ... ){ ... }

$(a/b){извините, произошла ошибка}, выполнение шаблона не прервется

если мы создали в питоне функцию
def myfunction(a, b, c):
   ...

в шаблоне $myfunction(x, y, z) сделает вызов и подставит результат

$myfunction(x, y){ ... } - передать разметку, третий аргумент

def IF(p, q):
  if p: return q
  else: return ""

$IF(a<b){ a меньше чем b}

$IF(a<b){ $a меньше чем $b!!! }
если a = 10, b = 20, на экран будет вываедено "10 меньше чем 20"

$myfunction(x){ ... }{ ... }

$myfunction{ ... }{ ... }{ ... }
получает 3 разметки

$cycle{ ... }{ ... }{ ... }

есть три дырки на странице
$mylayout{ header }{ body }{ footer }

особенность if IF
сначала выполнится разметка


$if( b != 0){ Результат $(a/b) }

обычный иф выполнит a/b только если b!=0, а наш иф - сначала выполнит разметку, то есть a/b

def IF(p, q):
  if p: return q.eval()
  else: return ""

IF.lazy = True  - полностью имитирует обычный if

-----
def div(x):
    return html('<div class="myclass">$x</div>')

$div{ <h1>Hello, $name!</h1> }
результат будет
<div class="myclass"><h1>Hello, John!</h1></div>

@lazy
def IF(p, q):
  if p: return q.eval()
  else: return ""

$separator

$for(a, b in expr)
{
  ...
}
$separator{ ... }
$else{ ... } - послушать запись

------------
$for(a, b in expr) {
  ...
}

$for(a, b in expr)
{
  ...
}
мы поглащаем некоторые переводы строк, надо проэкспериментировать (наверное после первой фигурной скобки)

i18n

---------------


from pony.templating import html

class Layout(object):
    def header(self, markup):
        self._header = markup
    def footer(self, markup):
        self._footer = markup
    def __str__(self):
        return html('''
            <div>
              <h1>$(self._header)</h1>
              <h2>$(self._footer)</h2>
            </div>
            ''')
    
print html("""

$Layout()
$.header{<strong>This is header</strong>}
$.footer{<em>This is footer</em>}

$Layout()
$.header{<strong>This is header</strong>}
$.footer{<em>This is footer</em>}

""")

$.header - метод предыдущего объекта, который был создан
str генерируется неявно