
### Параметры декоратора http
Декоратор http может принимать несколько параметров: url, host, port, redirect, **headers.
Все параметры необязательные.

`url`  
Задает шаблон URL, который будет обрабатываться этой функцией. Параметр может включать в себя следующие части

  *  Статические части. Требуется полное совпадение между указанной статической частью и соответствующей
  частью полученного URL
  *  Параметры. Параметр начианается с символа `$` и может состоять из символов, которые разрешены для
  использования в идентификаторах в Питоне - буквы, цифры и знак подчеркивания.
  Если требуется, чтобы символ $ присутствовал в самом URL, нужно его записать как $$,
  чтобы дать понять Пони, что далее идет не переменная, а знак $.
  * wildcard. Запись `$*` соответствует любому набору символов начиная с этого места и до конца URL или до знака `?`, если он присутствует в URL.
  После знака `?` могут быть указаны параметры. __привести пример тут__

Пример

    @http('/events/archive/$year/$month/posts')
           |              |     |      | статическая часть
        статическая часть  параметр1
                                   параметр2


`host`    
Когда веб сервер передает запрос приложению, в запросе указывается какому хосту и порту предназначается вызов

    http://localhost:8080/hello
            host     port

Если приложение обслуживает несколько хостов, то в этом параметре можно указать, какой хост обслуживает эта функция.
По умолчанию, когда не указано никакое значение, параметр HTTP запроса host не анализируется. Таким образом
обрабатываются запросы пришедшие с любого хоста.
В этом параметре можно указать сразу и хост и порт, например:

    @http(host='localhost:8080')
    def hello():
        return 'Hello world!'

Эта функция будет обрабатывать только те запросы, которые были адресованы хосту localhost на порт 8080.
Если, например, веб сервер работает еще и на порту 80, и пользователь обратиться на этот порт, то
такой запрос этой функцией обработан не будет.

`port`  
Если приложение обслуживает несколько портов, например localhost:80 и localhost:8080, то можно указать,
какой конкретный порт обслуживает эта функция. По умолчанию, если ничего не указывать в качестве значения,
обслуживаются все порты, на которых запущен веб сервер.

`redirect`  
Этот параметр определяет будет ли осуществляться редирект с указанного URL.
Значение по умолчанию - `False`, редирект не выполняется.
Другие значения этого параметра будут приводить к редиректу.
Редирект будет произведен на постоянный URL, указанный для этой же функции-обработчика
(URL для которого не задан параметр `redirect`).
Хорошим тоном является наличие у страницы только одного постоянного URL.
Возможные значения этого параметра - стандартные коды редиректа для HTTP:

    '301 Moved Permanently'
    '302 Found'
    '303 See Other'
    '305 Use Proxy'
    '307 Temporary Redirect'

Значение параметра `True` эквивалентно коду '301 Moved Permanently'
Для этого параметра возможна короткая запись. Если указать только числовое значение кода,
оно будет преобразовано к полной стандартной записи.
Например:

    @http('/new-hello')
    @http('/old-hello', redirect=307)
    def hello():
        return 'Hello world!'
    
Обращение к URL '/old-hello' приведет к редиректу на URL '/new-hello' с кодом '307 Temporary Redirect'.

`**headers`  
Если возникает необходимость установить какие то определенные заголовки при генерации страницы,
можно указать их в качестве поименных параметров в декораторе @http:
    
    @http('/test', foo_bar='123')
    def myfunction():
        return 'hello'

Результатом будет страница, в которой будет установлен заголовок `Foo-Bar` со значением `123`.
Символ подчеркивания в имени заголовка заменяется на символ '-', а каждая часть имени начинается с заглавной буквы:

    200 OK
    Content-Type: text/plain
    Foo-Bar: 123

Эту возможность удобно использовать, если нам нужно указать тип генерируемого функцией контента или кодировку:
    
    @http(type="text/foobar; charset=koi8-r")    
    def test():
        return 'test'
 
Результатом будет страница, в которой установлен заголовок
`Content-Type: text/foobar; charset=koi8-r`

Часто пользователям удобно указывать MIME тип и кодировку по отдельности. Эта возможность поддерживается в Пони:

    @http(content_type="text/foobar", charset="koi8-r")
    def test():
        return 'test'

По умолчанию, если не задан `type`, его значением будет `text/plain`,
а значение `charset=UTF-8`




### Параметры функции url ###


Для функции url первым параметром указывается функция-обработчик, для которой строится URL.
Затем идут параметры функции-обработчика. Результатом вызова функции `url` является текстовый URL.
Примеры:

    @webpage('/myblog/archive/$year/posts')
    def archive(year):
        print "Archived posts"

    @webpage
    def index():
        print "<html>"
        print '<p><a href="%s">Go to year 2003</a></p>' % url(archive, '2003')
        print "</html>"
