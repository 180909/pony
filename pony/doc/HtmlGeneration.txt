Генерация HTML
==============

Пони предоставляет два способа генерации HTML страниц:

  * Декоратор @printhtml в совокупности с оператором print
  * Язык шаблонов

Первый способ, который мы рассмотрим в этой главе, предназначен в основном
для простых приложений. Второй способ более гибкий и мощный, его мы рассмотрим
чуть позже. __ссылка Templating__



### Использование декоратора @printhtml и оператора print


Пример использования оператора print для генерации страницы:

    >>> from pony.main import *             (1)
    >>> @http                               (2)
    ... @printhtml                          (3)
    ... def test():                         (4)
    ... 	print "<html>"                  (5)
    ...     print "<head><title>Hello world!</title></head>"
    ... 	print "<body><h1>Hello world!</h1></body>"
    ... 	print "</html>"
    ... 
    >>> http.start()                        (6)
    Starting HTTP server at localhost:8080

  (1) Импортируем все необходимые компоненты Пони
  (2) Декоратор @http указывает, что эта функция будет обработчиком URL (см. URL роутинг)
  (3) Если функция отдекорирована с помощью @printhtml, оператор print служит для генерации содержимого страницы
  (4) Объявляем функцию test()
  (5) Генерируем содержимое страницы с помощью оператора print
  (6) Запускаем веб-сервер

Если теперь набрать адрес http://localhost:8080/test в браузере, то мы увидим страницу:

__картинка__

Если мы посмотрим на HTML код страницы в браузере, то увидим, что он полностью соответствует
тому коду, который мы указали в теле функции test:

__ картинка__


Возможность задать HTML код каждой страницы от начала и до конца безусловно дает разработчику максимум возможностей. 
Однако на практике каждая страница веб-сайта имеет часть, которая общая для всех. Обычно это CSS стили, которые
едины для всего содержимого веб-сайта.
Чтобы избавить разработчика от рутинной работы, Пони позволяет включать общие для всех страниц части автоматически.

    @webpage
    def test():
        print "<title>Hello world!</title>"
        print "<h1>Hello world!</h1>"

Сгенерированная страница выглядит теперь так:

__картинка__

А HTML код страницы так:

__картинка__    

Пони автоматически задала повторающиеся для каждой страницы тэги (html, head, body и пр.), а также присоединила
стандартные стили CSS. Тэг title добавлен в содержимое тэга head, тогда как остальная часть документа в
тэг body. Пони автоматически включает заданные разработчиком тэги в соответствующее место документа согласно
стандарту HTML.
В последнем примере используется декоратор @webpage.  @http, @printhtml

При генерации содержимого страницы 

хелло ворлд с помощью
printhtml
<html><html>

затем убираем тэг html и показываем что в страницу добавляется автоматически
подробно об этом вы можете прочитать в CSS 

пример с передачей параметра в функцию

декоратор webpage
если вам не хочется писать два декоратора http, printhtml
можно писать webpage

пример с передачей кода и как он будет отображен
как же пони справляется с такой проблемой?
а с помощью опасных и безопасных строк
все строки внутри - безопасные
все остальные, полученные от пользователя или из базы данных считаются опасными

у принта есть недостатки
его нельзя использовать в гае
потому что декоратор printhtml требует компиляции кода, что запрещено в гае

если отдекорировать printhtml, то все строковые константы заменяются на безопасные строки
как обойти это? если нам нужна строчка, которая не заменится на безопасную.
самый простой способ это сделать так
"это обычная строка" [:]
или так
plainstr("обычная строка")

result = db.fetchall("select * from Table1"[:])
это касается только функции, если в модуле строка объявлена, то все нормально

либо вынести логику работы с базой данных в отдельную функцию


это получается так изза особенностей реализации питона

Безопасные и небезопасные строки

Веб приложения могут быть подвержены Cross-Site Scripting (XSS) атаке.
Суть этой атаки в следующем. Допустим есть веб-сайт, на котором есть форум. 
Злоумышленник под видом сообщения передает на сайт javascript код. Веб-приложение сохраняет
этот код в базе данных как и любое другое сообщение.
Теперь у любого пользователя, который откроет страницу, содержащую это сообщение, выполнится переданный злоумышленником javascript код. 
Чтобы защититься от такого рода атак, все данные, которые получены сервером от пользователя должны пройти процесс эскапирования -
преобразования символов &amp;,&lt;,&quot;,&gt;,&#39; в их эквиваленты для безопасного представления на странице.

В большинстве современных веб-фреймворков для того, чтобы выполнилось такое преобразование, нужно вызвать специальную функцию.
Такой подход неудобен и чреват ошибками. В Пони реализована более удобная концепция.
Строки, которые генерируются в Пони, являются экземплярами класса Html. Это безопасные строки.
Любой текст, который Пони получает от пользователя считается небезопасной строкой. Любое соединение небезопасной строки
со строкой Html приводит к эскапированию небезопасной строки перед соедниением. Таким образом, если пользователь передал в веб-приложение
код, при генерации страницы этот код будет преобразован в безопасную строку и выведен как обычный текст.





Для генерации более сложных страниц удобно использовать шаблоны, о которых пойдет речь далее.


----- потокобезопасность оператора принт внутри пони --------
не так уж много современных фремв используют принт, хотя это удобно
потому что для вывода не на консоль требуется редирект вывода
эта операция не являестся потокобезопасной в питоне
в пони она потокобезопасна
поэтому это накапливается в буффере

