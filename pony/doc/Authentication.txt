Аутентификация и работа с сессией
=================================

Веб-сервер не поддерживает постоянного соединения с браузером пользователя.
Каждый запрос пользователя веб-сервер обрабатывает независимо, не учитывая предыдущие
запросы. Возникает проблема отличить запрос одного пользователя от другого и
сохранить данные между запросами одного и того же пользователя. Решается эта задача
с помощью сессий.
Сессия - это механизм, который позволяет различать запросы от разных пользователей,
а также работать с переменными, которые хранят свои значения в течение работы
пользователя с веб-приложением.

Так как веб-сервер обрабатывает каждый запрос независимо от других, предыдущих запросов,
сам запрос должен содержать информацию, необходимую для идентификации пользователя.
Одним из способов идентификации пользователя является использование логина
и пароля. Но мы не хотим заставлять пользователя вводить логин и пароль
для каждого запроса к веб-серверу. Логин с паролем вводятся один раз.
На основе правильного логина и пароля пользователь получает "билет", который он
предъявляет при каждом последующем
обращении к веб-серверу. Если злоумышленник попытается подделать "билет",
чтобы выдать себя за другого пользователя, веб-фреймворк выявляет это
с помощью процесса называемого аутентификацией.
Аутентификация - это процесс, направленный на то, чтобы отличить настоящего
пользователя от злоумышленника, выдающего себя за настоящего пользователя.

Различные фреймворки реализуют механизм аутентификации и работы с сессией по-разному.
Например, во многих PHP фреймворках идентификатор сессии добавляется в URL.
Когда в веб-приложение поступает такой запрос, из базы данных извлекается
информация о сессии для данного идентификатора. Недостатком такой схемы
является слабая защищенность - идентификатор, указанный в строке адреса может
быть легко перехвачен злоумышленником.
В других системах для хранения сессий используются кукисы (cookies).
Кукисы - это данные, которые веб-сервер посылает браузеру вместе с запрошенной HTML страницей.
Браузер запоминает эти данные и посылает серверу каждый раз при обращении
за новой страницей. Таким образом веб-приложение может отличить одного пользователя от другого.

Хранение данных в кукисах имеет преимущество - это избавляет от необходимости
обращаться к базе данных за данными сессии для обработки каждого запроса, что
ускоряет работу и снижает нагрузку на базу данных.
При хранении данных в кукисах есть одно ограничение - максимально допустимый размер
данных (4 килобайта). Если есть необходимость хранить в сессии данные большего размера,
тогда можно держать данные в файле на сервере или в базе данных. Кукисы в таком случае
служат для хранения и передачи уникального идентификатора сессии. 

Пони использует кукисы для хранения данных сессии.
Механизм аутентификации выполнен с помощью цифровой подписи.
Каждая подпись действительна только в течение некоторого времени, что повышает безопасность.

Пони хранит кукисы с аттрибутом HttpOnly. Это не дает возможности javascript'у получить
доступ к кукисам, что повышает безопасность. К сожалению этот атрибут работает
только в новых браузерах. Старые браузеры не понимают и не учитывают HttpOnly.


Работа с пользователем сессии
-----------------------------

Работа с сессией обычно происходит следующим образом:
 - пользователь открывает страницу, где он указывает логин и пароль
 - браузер передает логин и пароль в веб-приложение
 - веб-приложение проверяет правильность логина и пароля
 - если данные правильные, веб-приложение устанавливает пользователя в сессии

Для того, чтобы указать сессии, что произошел логин пользователя, нужно присвоить
полю http.user значение идентификатора пользователя. Это можно сделать
несколькими путями:

    http.user = 'john'

или

    http.set_user('john')

Идентификатором пользователя может быть произвольная строка или число.
Также возможна такая запись:
    
    http.set_user('john', remember_ip=True) 
     
Здесь первым параметром указывается идентификатор пользователя, второй параметр
указывает нужно ли запоминать IP адрес пользователя.
Если указать remember_ip=True, то при смене пользователем IP адреса,
сессия становится недействительна. Это может улучшить безопасность - даже если
злоумышленник украдет сессию, он не сможет ее использовать. Однако, бывают
ситуации, когда IP адрес меняется в процессе работы у нормального пользователя.
Например, если он пользуется услугами мобильного интернета(в автомобиле,
поезде, самолете).
По умолчанию IP адрес пользователя не запоминается(remember_ip=False)

Узнать текущее значение идентификатора пользователя можно проанализировав
значение http.user. Например:

    current_user = http.user
    
Если пользователь был установлен и сессия действительна на данный момент,
current_user получит установленное ранее значение. В противном случае
current_user получит значение None.

Для того, чтобы завершить сеанс, нужно присвоить None значению идентификатора:

    http.user = None
    
или

    http.set_user(None)
    
В этом случае все сопутствующие данные (данные из http.session) будут удалены.
Данные сессии будут также очищены, если код приложения поменяет пользователя.
То есть значение http.user было не None и его значение поменялось на другое.




Работа с данными сессии
-----------------------


Информация в сессии состоит из двух частей:

    * идентификатор пользователя - http.user
    * другие данные - http.session
    
http.user
Устанавливается кодом приложения и хранит информацию о том, кто в
данный момент залогинился - идентификатор пользователя(строка или число)

http.session
Хранит произвольную информацию, которое приложение сохраняет для пользователя.
Например, последние просмотренные товары или идентификатор виртуальной корзины
пользователя.
Дополнительную информацию можно хранить даже до того, как пользователь
залогинился(то есть когда значением http.user является None).
Если приложение затем присваивает сессии значение для http.user,
то содержимое http.session сохраняется.


Сессия в Пони реализована в виде специального объекта на основе словаря(dict), 
но с более удобным интерфейсом.
Основное удобство заключается в том, что доступ к данным сессии можно
осуществлять не только с помощью квадратных скобок, но и обращаясь к элементу
сессии как к атрибуту. То есть вместо

    http.session["foo"]

Пони позволяет также писать

    http.session.foo
    
Разница заключается лишь в том, что при доступе через квадратные скобки, если
необходимый элемент отсутствует в сессии, возникнет исключение KeyError,
а при доступе через атрибут будет возвращено значение None.

Если необходимо, чтобы при отсутствии в сесии элемента данных foo было возвращено
значение по умолчанию, отличное от None, можно использовать следующий синтаксис:

    http.session("foo", "default_value")

Для того, чтобы имена атрибутов в объекте-сессии не путались с именами методов,
из сессии убраны все именованные методы которые есть в обычном словаре,
оставлен только метод session.clear(), очищающий всё содержимое сессии.
При выполнении метода session.clear() текущий пользователь(http.user) не очищается.

Для удаления элемента из сессии нужно присвоить ему значение None:

    http.session.foo = None
    
Можно использовать также синтаксис del:

    del http.session.foo
    
или

    del http.session["foo"]    
    

Сессия позволяет выполнить итерацию по ее содержимому, а также использовать
оператор in для проверки того, что элемент с таким ключом содержится
в сессии.

Если по какой-то причине разработчику нужно получить доступ к самому словарю,
он всегда сможет это сделать обратившись к нему с помощью

    http.session.__dict__




У сессии есть таймауты.
По умолчанию максимальная задержка между запросами к веб-серверу не должна
превышать 2-х часов, а общая длительность сессии не должна превышать 24 часа.
Если один из этих интервалов превышает установленные значения, сессия считается
устаревшей и обнуляется: http.user приобретает значение None, все элементы из
http.session удаляются.
Это значит, что даже если пользователь работает с сайтом без длительных
перерывов(перерывы не превышают двух часов), ему все равно приходится повторно выполнять
логин раз в сутки.

    

long_life_sessions
