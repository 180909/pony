Аутентификация и работа с сессией
=================================

Аутентификация направлена на то, чтобы отличить настоящего пользователя от злоумышленника,
выдающего себя за настоящего пользователя.

Когда пользователь ввел логин и пароль на сайте, для пользователя создается
сессия. Затем, когда пользователь запрашивает другие страницы, веб приложение
понимает, что это тот же самый пользователь благодаря этой сессии.

Различные фреймворки реализуют механизм аутентификации и работы с сессией по-разному.
Например, во многих PHP фреймворках идентификатор сессии добавляется в URL.
Когда в веб-приложение поступает такой запрос, из базы данных извлекается
информация о сессии для данного идентификатора. Недостатком такой схемы
является слабая защищенность - идентификатор, указанный в строке адреса может
быть легко перехвачен злоумышленником.
В других системах для хранения сессий используются кукисы (cookies).
Кукисы - это данные(максимальный размер - 4 килобайта), которые веб-сайт посылает
браузеру вместе с запрошенной HTML страницей.
Браузер запоминает эти данные и посылает серверу каждый раз при обращении
за новой страницей. Таким образом веб-сайт отличает одного пользователя от другого.

Пони использует кукисы для хранения данных сессии. Данные подписываются цифровой
подписью, что препятствует подделке.
Эта цифровая подпись действительна только в течении некоторого времени
и при создании сессии в настройках можно указать, что она действительна только
при поступлении запроса с конкретного IP-адреса.
таким образом если злоумышленник сумел получить информацию об устаревшей сесии,
он не сможет ей воспользоваться, потому что она будет устаревшей.


Хранение данных в кукисах имеет преимущество - это избавляет от необходимости
обращаться к базе данных за данными сессии для обработки каждого запроса, что
ускоряет работу и снижает нагрузку на базу данных.
При хранении данных в кукисах есть одно ограничение - максимально допустимый размер
данных (4 килобайта). Если есть необходимость хранить в сессии данные большего размера,
тогда можно держать данные в файле на сервере или в базе данных. Кукис в таком случае
служит для передачи идентификатора сессии. На данный момент для хранения
данных сессии Пони использует только кукисы.




Сессия
------

Веб сервер не поддерживает постоянного соединения с браузером клиента.
Каждый запрос, который посылается браузером, обрабатывается веб-сервером как отдельный
запрос, не имеющий никакой связи с предыдущими.
Чтобы веб-сервер мог отличить одного клиента от другого и сохранить данные между
запросами используются сессии.

Сессии позволяют сохранить переменные, которые будут доступны при последующих
обращениях клиента к веб-серверу.

Реализуются сессии с помощью кукисов. Кукисы - это небольшой объем(4 килобайта) текстовой
информации. Веб-сервер передает эту информацию браузеру. Теперь, если браузер
снова обращается к этому же веб-сайту, то вместе с запросом, он передает кукис,
который был ранее установлен сервером. 

Если приложению нужно хранить больше, чем 4К информации, то для этой цели можно
использовать либо файл, либо базу данных. В кукис в этом случае хранится уникальный
идентификатор пользователя. При использовании файла, этот идентификатор является
именем файла, где можно хранить сколько угодно информации.
Если используется база данных, то идентификатор является ключом в таблице.
Минусом такого подхода является дополнительная нагрузка на файловую систему или базу данных.

Пони предлагает удобный интерфейс для работы с данными сессии. Для хранения данных
используется словарь, содержимое которого затем шифруется с помощью секретного ключа и
передается в браузер клиента в виде кукис. Данные защищены с помощью шифрования и
не могут быть изменены клиентом.
При последующем обращении к веб-серверу вместе с запросом браузер передает и кукис.
Пони расшифровывает кукис и данные сессии, сохраненные во время предыдущего запроса,
становятся доступны в веб-приложении.

? Написать как бразуер работает с кукис
? что бразуер может быть настроен так, что не принимает кукис
? или хранит до того момента, пока не будет закрыт
? или сколько то дней



Сохранение и чтение данных из сессии
--------------------------

Пример:

    >>> from pony.main import *
    >>> http.session.foo = 5
    >>> print http.session.foo
    5
    
В этом примере мы импортируем необходимые компоненты Пони и
присваиваем переменной сессии `foo` значение `5`. С этого момента,
значение переменной `foo` будет доступно во время обработки последующих запросов
от этого клиента.

Если мы попробуем обратиться к переменной, которая отсутствует в сессии,
то возвращаемое значение будет `None`:

    >>> print http.session.bar
    None

При этом с данными сессии не произойдет никаких изменений.


Удаление данных из сессии
-------------------------

Если нам нужно удалить переменную из сессии, нужно присвоить ей значение `None`:

    >>> http.session.foo = None
    
Если переменная `foo` содержала какое то значение, оно было удалено из сессии.
Последующие обращения к этой переменной будут возвращать значение `None`



Другие действия с сессией
-------------------------

Сессия реализована в виде словаря(dict). Использование прямого обращения
к переменной по имени, как показано в начале этого раздела, лишь облегчает
работу с сессией и улучшает читаемость кода. Команда

    http.session.__dict__
    
возвращает словарь, в котором хранятся данные сессии.


Итерация по содержимому сессии
---------------------------------

Этот код отображает все содержимое сессии - имена переменных и их значения:

    for key in http.session:
        print key, http.session[key]

Так как для хранилища данных сессии используется словарь, следующий код
выполняет те же действия - отображает имена переменных в сессии и их значения:

    for key, value in http.session.__dict__.iteritems():
        print key, value


Использование значений по умолчанию
---------------------------------

Механизм использования значений по умолчанию для данных сессии работает
также, как и для словаря. Если для переменной указано значение по умолчанию,
то оно используется только если такой переменной нет в сессии. При этом в
сессию ничего не добавляется. Если для указанной переменной существует значение
в сессии, то значение по умолчанию игнорируется и возвращается значение
переменной из сессии. Далее приведен пример, который это демонстрирует:

    >>> print http.session.bar                  (1)
    None
    >>> print http.session("bar", "default")    (2)
    default
    >>> http.session.bar = "new value"          (3)
    >>> print http.session("bar", "default")    (4)
    new value

(1) Для переменной `bar` не установлено никакого значения в сессии.
(2) Обращение к переменной сессии `bar` с указанным значением по умолчанию ("default").
Возвращается значение по умолчанию
(3) Сохраним в сессии значение "new value" для переменной `bar`
(4) Теперь значение по умолчанию игнорируется и возвращается значение переменной из сессии


Очистка всех данных сессии
--------------------------

Метод clear() позволяет удалить все данные из сессии:

    http.session.clear()
    


Работа с пользователем
----------------------
http.user = 'John'
http.set_user('John')
http.set_user('John', remember_ip=True)
если помним айпи, то при смене айпи сессия становится недействительна
что может улучшить секьюрити и даже если злоумышленник украдет сессию из кукисов,
он не сможет ее использовать, чтобы зайти на сайт.
к сожалению это нельзя использовать по умолчанию, так как бывают ситуации,
когда у нормального пользователя айпи меняется.
например если он пользуется услугами мобильного интернета (в автомобиле, поезде, самолете)


set_user
Информация в сессии состоит из двух частей - http.user and http.session
http.user - хранит информацию о том, кто в данный момент залогинился
физически там может храниться какой то идентификатор пользователя
все что угодно, что определяет пользователя - его логин или идентификатор в БД
это может быть либо строка, либо число
когда будет реализован Маппер, там может хранится объект Юзер из базы данных

http.session
Хранит дополнительную информацию о пользователи в сессии. Например какие товары
пользователь положил себе в корзину.
Особенностью сессий в Пони является то, что Можно хранить ситуацию в сессии, даже до того, как он залогинился
таким образом пользователь может положить товары в корзину до того, как выполнил логин.

Для того, чтобы указать сессии, что произошел логин пользователя, нужно присвоить
полю http.user значение идентификатора пользователя:
это можно сделать двумя путями
http.user = 'John'
или
http.set_user('John')
или
http.set_user('John', remember_ip=True)

Обычно процесс логина происходит следующим образом:
пользователь передает веб-приложению логин и пароль
приложение проверяет правильность логина и пароля и если они совпадают с сохраненными
в базе значениями, приложение присваивает идентификатор пользователя в сессии.
то есть сам разработчик делает все это.

для того, чтобы завершить сеанс, нам нужно присвоить значение идентификатора пользователя как None
в этом случае все сопутствующие данные (данные из http.session) будут удалены.
Также они будут очищены, если мы поменяем пользователя. То есть user был не None и его значение поменялось



Пони хранит кукисы с аттрибутом HTTP_ONLY, что не дает возможности javascript'у получить
доступ к кукисам. Это повышает безопасность.
к сожалению только в новых браузерах. старые браузеры не понимают и не учитывают HTTP_ONLY

У сессии отслеживается время с момента ее создания и времени последнего запроса к серверу.
Если это время (интервал) превышает установленные значения то сессия считается недействительной
и обнуляется.
По умолчанию макс задержка между запросами не должна превышать 2х часов, а
общая длительность сессии не должна превышать сутки.
То есть даже если пользователь работает с сайтом без длительных перерывов, ему приходится
повторно выполнять логин раз в сутки.

long_life_sessions