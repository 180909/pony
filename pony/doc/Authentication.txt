Аутентификация и работа с сессией
=================================

Аутентификация направлена на то, чтобы отличить настоящего пользователя от злоумышленника,
выдающего себя за настоящего пользователя.

Когда пользователь ввел логин и пароль на сайте, для пользователя создается
сессия. Затем, когда пользователь запрашивает другие страницы, веб приложение
понимает, что это тот же самый пользователь благодаря этой сессии.

Различные фреймворки реализуют механизм аутентификации и работы с сессией по-разному.
Например, во многих PHP фреймворках идентификатор сессии добавляется в URL.
Когда в веб-приложение поступает такой запрос, из базы данных извлекается
информация о сессии для данного идентификатора. Недостатком такой схемы
является слабая защищенность - идентификатор, указанный в строке адреса может
быть легко перехвачен злоумышленником.
В других системах для хранения сессий используются кукисы (cookies).
Кукисы - это данные(максимальный размер - 4 килобайта), которые веб-сайт посылает
браузеру вместе с запрошенной HTML страницей.
Браузер запоминает эти данные и посылает серверу каждый раз при обращении
за новой страницей. Таким образом веб-сайт отличает одного пользователя от другого.

Пони использует кукисы для хранения данных сессии. Данные подписываются цифровой
подписью, что препятствует подделке.
Эта цифровая подпись действительна только в течении некоторого времени
и при создании сессии в настройках можно указать, что она действительна только
при поступлении запроса с конкретного IP-адреса.
таким образом если злоумышленник сумел получить информацию об устаревшей сесии,
он не сможет ей воспользоваться, потому что она будет устаревшей.


Хранение данных в кукисах имеет преимущество - это избавляет от необходимости
обращаться к базе данных за данными сессии для обработки каждого запроса, что
ускоряет работу и снижает нагрузку на базу данных.
При хранении данных в кукисах есть одно ограничение - максимально допустимый размер
данных (4 килобайта). Если есть необходимость хранить в сессии данные большего размера,
тогда можно держать данные в файле на сервере или в базе данных. Кукис в таком случае
служит для передачи идентификатора сессии. На данный момент для хранения
данных сессии Пони использует только кукисы.




Сессия
------


Веб сервер не поддерживает постоянного соединения с браузером клиента.
Каждый запрос, который посылается браузером, обрабатывается веб-сервером как отдельный
запрос, не имеющий никакой связи с предыдущими.
Чтобы веб-сервер мог отличить одного клиента от другого и сохранить данные между
запросами используются сессии.

Сессии позволяют сохранить переменные, которые будут доступны при последующих
обращениях клиента к веб-серверу.

Реализуются сессии с помощью кукисов. Кукисы - это небольшой объем(4 килобайта) текстовой
информации. Веб-сервер передает эту информацию браузеру. Теперь, если браузер
снова обращается к этому же веб-сайту, то вместе с запросом, он передает кукисы,
который был ранее установлен сервером. 

Пони предлагает удобный интерфейс для работы с данными сессии. Содержимое сессии
хранится в браузере клиента в виде кукисов. Для предотвращения фальсификации данных,
сессия подписывается цифровой подписью.




Работа с пользователем
----------------------
http.user = 'John'
http.set_user('John')
http.set_user('John', remember_ip=True)
если помним айпи, то при смене айпи сессия становится недействительна
что может улучшить секьюрити и даже если злоумышленник украдет сессию из кукисов,
он не сможет ее использовать, чтобы зайти на сайт.
к сожалению это нельзя использовать по умолчанию, так как бывают ситуации,
когда у нормального пользователя айпи меняется.
например если он пользуется услугами мобильного интернета (в автомобиле, поезде, самолете)


set_user
Информация в сессии состоит из двух частей - http.user and http.session
http.user - хранит информацию о том, кто в данный момент залогинился
физически там может храниться какой то идентификатор пользователя
все что угодно, что определяет пользователя - его логин или идентификатор в БД
это может быть либо строка, либо число
когда будет реализован Маппер, там может хранится объект Юзер из базы данных

http.session
Хранит дополнительную информацию о пользователи в сессии. Например какие товары
пользователь положил себе в корзину.
Особенностью сессий в Пони является то, что Можно хранить ситуацию в сессии, даже до того, как он залогинился
таким образом пользователь может положить товары в корзину до того, как выполнил логин.

Для того, чтобы указать сессии, что произошел логин пользователя, нужно присвоить
полю http.user значение идентификатора пользователя:
это можно сделать двумя путями
http.user = 'John'
или
http.set_user('John')
или
http.set_user('John', remember_ip=True)

Обычно процесс логина происходит следующим образом:
пользователь передает веб-приложению логин и пароль
приложение проверяет правильность логина и пароля и если они совпадают с сохраненными
в базе значениями, приложение присваивает идентификатор пользователя в сессии.
то есть сам разработчик делает все это.

для того, чтобы завершить сеанс, нам нужно присвоить значение идентификатора пользователя как None
в этом случае все сопутствующие данные (данные из http.session) будут удалены.
Также они будут очищены, если мы поменяем пользователя. То есть user был не None и его значение поменялось



Пони хранит кукисы с аттрибутом HttpOnly, что не дает возможности javascript'у получить
доступ к кукисам. Это повышает безопасность.
к сожалению только в новых браузерах. старые браузеры не понимают и не учитывают HttpOnly

У сессии отслеживается время с момента ее создания и времени последнего запроса к серверу.
Если это время (интервал) превышает установленные значения то сессия считается недействительной
и обнуляется.
По умолчанию макс задержка между запросами не должна превышать 2х часов, а
общая длительность сессии не должна превышать сутки.
То есть даже если пользователь работает с сайтом без длительных перерывов, ему приходится
повторно выполнять логин раз в сутки.




Работа с данными сессии
-----------------------


Сессию можно было бы реализовать как словарь (dict), однако в Пони она
реализована в виде специального объекта, более удобного, чем словарь.
Основное удобство заключается в том, что доступ к данным сессии можно
осуществлять не только с помощью квадратных скобок, но и обращаясь к элементу
сессии как к атрибуту. То есть вместо

    http.session["foo"]

Пони позволяет также писать

    http.session.foo
    
Разница заключается лишь в том, что при доступе через квадратные скобки, если
необходимый элемент отсутствует в сессии, возникнет исключение KeyError,
а при доступе через атрибут будет возвращено значение None.

Если необходимо, чтобы при отсутвии в сесии элемента данных foo было возвращено
значение по умолчанию, отличное от None, можно использовать следующий синтаксис:

    http.session("foo", "default_value")

Для того, чтобы имена атрибутов в объекте-сессии не путались с именами методов,
из сессии убраны все именованные методы которые есть в обычном словаре,
оставлен только метод session.clear(), очищающий всё содержимое сессии.
При этом текущий пользователь(http.user) не очищается.
Если присвоить элементу сессии значение None, он будет удален из сессии:

    http.session.foo = None
    
Можно использовать также синтаксис del:

    http.session.foo
    
или

    del http.session["foo"]    
    

Сессия позволяет выполнить итерацию по ее содержимому, а также использовать
оператор in для проверки того, что элемент с таким ключом содержится
в сессии.

Если по какой-то причине разработчику нужно получить доступ к настоящему словарю,
он всегда сможет это сделать обратившись к нему с помощью

    http.session.__dict__
    



long_life_sessions