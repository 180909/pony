Сравнение pony.db и DB-API
=========================


Модуль pony.db позволяет облегчить работу программиста и улучшить читаемость кода.
В этом разделе мы подробно рассмотрим отличия в использовании этих двух модулей.

Оператор select
---------------
    
Рассмотрим пример работы с БД Oracle с помощью DB-API:

    import cx_Oracle
    db = cx_Oracle.connect('hr', 'hrpwd', 'localhost:1521/XE')
    cursor = db.cursor()
    cursor.execute('SELECT * FROM jobs')
    for row in cursor:
        print row

Здесь мы импортируем модуль для работы с Оракл, подключаемся к БД, создаем курсор,
выполняем запрос и в цикле отображаем выбранные данные. Если нам по какой то причине
нужно пройтись по выбранным данным еще раз, то повторное обращение к курсору
в цикле не сработает. Операция

    for row in cursor:

Сгенерирует exception, потому что cursor в DBAPI представлен как итератор.
Чтобы проходить по выбранным данным в цикле более одного раза, используя DB-API,
следует сначала скопировать данные в список с помощью следующих команд:

    fetchone()
    fetchmany()
    fetchall()

Если мы используем pony.db, то результат SQL запроса к БД будет автоматически
скопирован в массив, что позволяет перебирать данные в цикле сколько угодно раз:

    пример




если мы пользуемся стандартным dbapi, то запрос выглядит так

for row in connection.execute("select id, first_name, last_nme from Student where group_number = ?", [ ngroup ]):
    print row[0], row[1], row[2]

for id, first_name, last_name in connection.execute("select id, first_name, last_name from Student where group_number = ?", [ ngroup ]):
    print id, first_name, last_name

у нас запрос выглядит так

for id, first_name, last_name in db.select("id, first_name, last_nme from Student where group_number = $ngroup"):
    print id, first_name, last_name
    
    или так
    
   for row in db.select("id, first_name, last_nme from Student where group_number = $ngroup"):
    print row.id, row.first_name, row.last_name




Запрос одной колонки из БД
--------------------------
    
если нужно взять одну колонку то так    
    for [first_name] in connection.execute("select first_name from Student where group_number = ?", [ ngroup ]):
    print first_name
    
    дбапи всегда возвращает список списков - неудобство

    а для одной колонки у нас запрос будет выглядеть так
    
    for first_name in db.select("id, first_name, last_nme from Student where group_number = $ngroup"):
    print first_name
    
    он смотрит какое количество колонок выдал селект. если одно, то там не список, а один элемент
    здесь иногда список списков, а иногда список значений, если одна колонка
    


Запрос одной строки и одной колонки из БД
-----------------------------------------
    
get
дбапи
first_name = connection.execute("first_name from Student where group_number = ?", [ ngroup ]).fetchone()[0]
пони
first_name = db.get("first_name from Student where id = $id"):

в дбапи фетчван берет первую строку и первый столбец.
у нас если возвращается более одной строки, значит пользователь ошибся и возникает эксепшн
в дпапи пользователь должен сам контролировать такие ситуации

?? это сюда же??    
first_name, last_name = db.get("first_name, last_name from Student where id = $id")
одна строка, несколько колонок
это немножко облегчает работу и читаемость кода

    
    
Передача параметров в запрос
----------------------------
Метод execute служит для выполнения любого SQL запроса:

cursor = db.execute(u"insert into Студенты values($first_name, $last_name, $ngroup)")

отличие от дбапи в том, что параметры всегда передаются через доллар
вне зависимости от бд
возвращается низкоуровневый курсор, с которым можно выполнять дбапи операции
