### Интернационализация

Интернационализация это представление содержимого веб-сайта на разных языках.
Многие фреймворки используют для этой цели стандартный модуль Питона gettext.
Пони реализует более удобный и не менее мощный способ интернационализации речь о
котором пойдет в этой главе.

Для начала давайте разберемся как веб-приложение понимает на каком языке нужно отобразить контент.
Когда браузер пользователя посылает запрос на веб-сайт, заголовок HTTP запроса
содержит поле _Accept-Language_ в котором передается список языков и их приоритеты.
Этот список можно задать в настройках браузера. По умолчанию браузер берет настройки из операционной системы.

Таким образом, Пони получает список предпочтительных языков от браузера клиента.
Пони сортирует список языков в порядке убывания приоритета.
При генерации страницы на основе шаблонов Пони использует эту информацию и пытается подобрать
соответствующий перевод в соответствии с приоритетом.
Если более подходящий язык не найден, для генерации страницы используется первоначальный текст шаблона.
После общего обзора процесса интернационализации давайте передем к деталям.




### Два способа интернационализации страниц

Шаблон обычно состоит из HTML разметки и текста.
При переводе страницы на другой язык разработчик стоит перед выбором из двух вариантов.
Первый вариант - отметить в шаблоне фразы, для которых предусматривается перевод и сопоставить им
переведенный текст в специальном файле.
Второй вариант - задать для каждого языка отдельный шаблон.

У каждого варианта есть плюсы и минусы.
Первый вариант удобен если текста на странице немного и в шаблоне есть фразы, которые используются
в других страницах. В этом случае нужно везде в шаблонах указать, что для этой фразы нужен перевод
и сопоставить перевод в специальном файле.
Минус этого варианта в том, что так как перевод делается по отдельным фразам, может получиться, что
на одной странице будут фразы на разных языках.

Второй вариант удобен, если страница содержит много текста или если для разных языков нужна
различная раскладка страницы(например колонка навигации отображается с другой стороны).
Минус этого варианта в том, что при внесении изменений в раскладку HTML нужно менять более одного шаблона.




### Интернационализация отдельных фрагментов страницы

При использовании этого подхода, Пони подставляет перевод указанных фрагментов на этапе генерации страницы.
Разработчик помечает фразы, для которых предусмотрен перевод в тексте шаблона с помощью символа $
и фигурных скобок:

   ${Please enter login and password:}   

В файле translations.txt для этих фраз задается перевод:

   Please enter login and password:
     ru  Пожалуйста введите логин и пароль:
     de  Bitte geben Sie Ihren Benutzernamen und Ihr Passwort ein:

Если предпочтительным для пользователя языком является русский(ru) или немецкий(de),
то Пони подставит переведенную фразу в шаблон.
Допустим, что список предпочтительных языков состоит лишь из французского(fr).
Так как перевода на французский в файле нет, Пони отобразит на странице изначальную фразу:

   Please enter login and password:   

__написать про использование ключей вместо фраз__

### Формат файла перевода

Фрагменты, для которых задается перевод помещаются в файл translations.txt.
В этом файле для каждой ключевой фразы код языка и перевод.
Ключевая фраза начинается с первого символа строки и должна занимать одну строку.
В последующих строках указываются переводы.
Каждая строка с переводом должна начинаться либо с пробела, либо с символа табуляции.
Сначала идет код языка. После кода языка идет снова пробел или символ табуляции.
Затем идет сам перевод:

   Required field text
     en  This field is required
     ru  Это поле является обязательным

   # Это комментарий     

Файл переводов может содержать комментарии. Комментарий должен начинаться с символа #,
который помещается в первой позиции в строке.

Файл translations.txt следует поместить в ту же директорию, в которой находится главный модуль
веб-приложения. В поставке Пони уже есть один файл translations.txt. Он располагается в директории
pony. Этот файл содержит переводы для системных сообщений Пони и сообщений форм.
Переводы, заданные в файле translations.txt, который создал разработчик, перекрывают те, которые заданы
в самой Пони. То есть если в файле разработчика встретится та же ключевая строка, которая задана в
поставке Пони, в шаблон попадет перевод, заданный пользователем.

Разработчику может быть удобно иметь более одно файла с переводами.
Допустим, сайт нужно перевести на немецкий и французский языки и переводом занимаются разные люди.
Тогда можно создать два файла:

   translations-de.txt
   translations-fr.txt

В каждом из которых содержатся те же самые ключевые строки, но разные переводы.
При запуске приложения Пони считывает все файлы с переводами из директории, в которой находится главный модуль
веб-приложения. Названия файлов с переводом начинаются с "translations-" и имеют расширение ".txt".
Код языка в имени файла в этом случае не учитывается и указывается лишь для удобства разработчика.




### Использование параметров в строке для перевода


Пони позволяет задавать перевод для строк, которые содержат параметры.
При этом для разных языков параметры могут находиться в разных местах строки.
Например строка, нуждающаяся в переводе выглядит таким образом в шаблоне:

   ${$a plus $b equals to $(a + b)}

Для записи в файл переводов нужно пронумеровать параметры. Таким образом ключевая строка
в файле переводов будет выглядеть так:

   $1 plus $2 equals to $3

Теперь, когда у параметров есть номера, в переводах мы можем отображать их в любом порядке.

   $1 plus $2 equals to $3
     ru   $3 это сумма $1 и $2
     de   $1 plus $2 ist $3




### Отдельный шаблон для каждого языка

Если страница, нуждающаяся в переводе содержит много текста, или в зависимости от языка
меняется раскладка страницы,
может быть удобно задавать шаблоны для каждого языка в разных файлах.
Допустим в модуле module1 веб-приложения есть функция func1():

   @http
   def func1():
      return html()

Этой функции будет соответствовать файл шаблона с именем

   module1.func1.html

Например, в браузере пользователя список предпочтительных языков состоит из русского и английского: ru, en.   
Когда Пони генерирует страницу, она проверяет, существует ли файл с именем

   module1.func1-ru.html

Если такой файл существует, то он используется в качестве шаблона.
Если такого файла на диске нет, то проверяется есть ли файл с именем

   module1.func1-en.html

Если такой файл есть, используется он. Если такого файла на диске нет, то Пони будет использовать
в качестве шаблона файл с именем

   module1.func1.html

Таким образом Пони проверяет, если ли в приложении шаблон, заданный специально для указанного языка.
Если его нет, используется общий для всех языков шаблон.

Рассмотренные выше два подхода можно комбинировать.




### Установка предпочтительного языка в сессии


Предпочтительный язык для отображения содержимого веб-сайта передается из настроек браузера.
Но пользователь не всегда имеет контроль над этими настройками.
Например, русский пользователь Вашего веб-сайта отдыхает в Китае и открывает страничку из местного интернет-кафе.
Браузер в этом случае может передать в качестве предпочтительного языка китайский.
Если Ваше приложение переведено на китайский, то русский пользователь увидит китайские иероглифы.
В этой ситуации нужно дать пользователю возможность выбрать желаемый язык интерфейса на самом веб-сайте.

Для этой цели Пони позволяет перекрывать языковые настройки в сессии. 
Браузер пользователя передает Пони предпочтительные языки. Пони представляет эти языки в виде списка,
который отсортирован в порядке убывания приоритета. Когда разработчик указывает язык в сессии, этот
язык ставится в самое начало списка, имея таким образом наивысший приоритет.
Чтобы задать русский язык в сессии нужно выполнить такую команду:

   http.lang = "ru"   

О других параметрах сессии можно почитать в разделе [Работа с сессиями](Sessions).